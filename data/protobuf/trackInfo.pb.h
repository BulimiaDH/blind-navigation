// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: trackInfo.proto

#ifndef PROTOBUF_trackInfo_2eproto__INCLUDED
#define PROTOBUF_trackInfo_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace blindfind {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_trackInfo_2eproto();
void protobuf_AssignDesc_trackInfo_2eproto();
void protobuf_ShutdownFile_trackInfo_2eproto();

class Relation2d;
class Relation3d;
class Relation2dBetweenTracks;
class Relation3dBetweenTracks;
class View;
class Track;
class AllRelations;
class TrackMap;

// ===================================================================

class Relation2d : public ::google::protobuf::Message {
 public:
  Relation2d();
  virtual ~Relation2d();

  Relation2d(const Relation2d& from);

  inline Relation2d& operator=(const Relation2d& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Relation2d& default_instance();

  void Swap(Relation2d* other);

  // implements Message ----------------------------------------------

  Relation2d* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Relation2d& from);
  void MergeFrom(const Relation2d& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required double xDiff = 1 [default = 0];
  inline bool has_xdiff() const;
  inline void clear_xdiff();
  static const int kXDiffFieldNumber = 1;
  inline double xdiff() const;
  inline void set_xdiff(double value);

  // required double yDiff = 2 [default = 0];
  inline bool has_ydiff() const;
  inline void clear_ydiff();
  static const int kYDiffFieldNumber = 2;
  inline double ydiff() const;
  inline void set_ydiff(double value);

  // required double angleDiff = 3 [default = 0];
  inline bool has_anglediff() const;
  inline void clear_anglediff();
  static const int kAngleDiffFieldNumber = 3;
  inline double anglediff() const;
  inline void set_anglediff(double value);

  // @@protoc_insertion_point(class_scope:blindfind.Relation2d)
 private:
  inline void set_has_xdiff();
  inline void clear_has_xdiff();
  inline void set_has_ydiff();
  inline void clear_has_ydiff();
  inline void set_has_anglediff();
  inline void clear_has_anglediff();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  double xdiff_;
  double ydiff_;
  double anglediff_;
  friend void  protobuf_AddDesc_trackInfo_2eproto();
  friend void protobuf_AssignDesc_trackInfo_2eproto();
  friend void protobuf_ShutdownFile_trackInfo_2eproto();

  void InitAsDefaultInstance();
  static Relation2d* default_instance_;
};
// -------------------------------------------------------------------

class Relation3d : public ::google::protobuf::Message {
 public:
  Relation3d();
  virtual ~Relation3d();

  Relation3d(const Relation3d& from);

  inline Relation3d& operator=(const Relation3d& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Relation3d& default_instance();

  void Swap(Relation3d* other);

  // implements Message ----------------------------------------------

  Relation3d* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Relation3d& from);
  void MergeFrom(const Relation3d& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required double xDiff = 1 [default = 0];
  inline bool has_xdiff() const;
  inline void clear_xdiff();
  static const int kXDiffFieldNumber = 1;
  inline double xdiff() const;
  inline void set_xdiff(double value);

  // required double yDiff = 2 [default = 0];
  inline bool has_ydiff() const;
  inline void clear_ydiff();
  static const int kYDiffFieldNumber = 2;
  inline double ydiff() const;
  inline void set_ydiff(double value);

  // required double zDiff = 3 [default = 0];
  inline bool has_zdiff() const;
  inline void clear_zdiff();
  static const int kZDiffFieldNumber = 3;
  inline double zdiff() const;
  inline void set_zdiff(double value);

  // required double yaw = 4 [default = 0];
  inline bool has_yaw() const;
  inline void clear_yaw();
  static const int kYawFieldNumber = 4;
  inline double yaw() const;
  inline void set_yaw(double value);

  // required double pitch = 5 [default = 0];
  inline bool has_pitch() const;
  inline void clear_pitch();
  static const int kPitchFieldNumber = 5;
  inline double pitch() const;
  inline void set_pitch(double value);

  // required double roll = 6 [default = 0];
  inline bool has_roll() const;
  inline void clear_roll();
  static const int kRollFieldNumber = 6;
  inline double roll() const;
  inline void set_roll(double value);

  // @@protoc_insertion_point(class_scope:blindfind.Relation3d)
 private:
  inline void set_has_xdiff();
  inline void clear_has_xdiff();
  inline void set_has_ydiff();
  inline void clear_has_ydiff();
  inline void set_has_zdiff();
  inline void clear_has_zdiff();
  inline void set_has_yaw();
  inline void clear_has_yaw();
  inline void set_has_pitch();
  inline void clear_has_pitch();
  inline void set_has_roll();
  inline void clear_has_roll();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  double xdiff_;
  double ydiff_;
  double zdiff_;
  double yaw_;
  double pitch_;
  double roll_;
  friend void  protobuf_AddDesc_trackInfo_2eproto();
  friend void protobuf_AssignDesc_trackInfo_2eproto();
  friend void protobuf_ShutdownFile_trackInfo_2eproto();

  void InitAsDefaultInstance();
  static Relation3d* default_instance_;
};
// -------------------------------------------------------------------

class Relation2dBetweenTracks : public ::google::protobuf::Message {
 public:
  Relation2dBetweenTracks();
  virtual ~Relation2dBetweenTracks();

  Relation2dBetweenTracks(const Relation2dBetweenTracks& from);

  inline Relation2dBetweenTracks& operator=(const Relation2dBetweenTracks& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Relation2dBetweenTracks& default_instance();

  void Swap(Relation2dBetweenTracks* other);

  // implements Message ----------------------------------------------

  Relation2dBetweenTracks* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Relation2dBetweenTracks& from);
  void MergeFrom(const Relation2dBetweenTracks& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 track1Id = 1 [default = 0];
  inline bool has_track1id() const;
  inline void clear_track1id();
  static const int kTrack1IdFieldNumber = 1;
  inline ::google::protobuf::int32 track1id() const;
  inline void set_track1id(::google::protobuf::int32 value);

  // required int32 track2Id = 2 [default = 0];
  inline bool has_track2id() const;
  inline void clear_track2id();
  static const int kTrack2IdFieldNumber = 2;
  inline ::google::protobuf::int32 track2id() const;
  inline void set_track2id(::google::protobuf::int32 value);

  // required int32 view1Id = 3 [default = 0];
  inline bool has_view1id() const;
  inline void clear_view1id();
  static const int kView1IdFieldNumber = 3;
  inline ::google::protobuf::int32 view1id() const;
  inline void set_view1id(::google::protobuf::int32 value);

  // required int32 view2Id = 4 [default = 0];
  inline bool has_view2id() const;
  inline void clear_view2id();
  static const int kView2IdFieldNumber = 4;
  inline ::google::protobuf::int32 view2id() const;
  inline void set_view2id(::google::protobuf::int32 value);

  // required double xDiff = 5 [default = 0];
  inline bool has_xdiff() const;
  inline void clear_xdiff();
  static const int kXDiffFieldNumber = 5;
  inline double xdiff() const;
  inline void set_xdiff(double value);

  // required double yDiff = 6 [default = 0];
  inline bool has_ydiff() const;
  inline void clear_ydiff();
  static const int kYDiffFieldNumber = 6;
  inline double ydiff() const;
  inline void set_ydiff(double value);

  // required double angleDiff = 7 [default = 0];
  inline bool has_anglediff() const;
  inline void clear_anglediff();
  static const int kAngleDiffFieldNumber = 7;
  inline double anglediff() const;
  inline void set_anglediff(double value);

  // @@protoc_insertion_point(class_scope:blindfind.Relation2dBetweenTracks)
 private:
  inline void set_has_track1id();
  inline void clear_has_track1id();
  inline void set_has_track2id();
  inline void clear_has_track2id();
  inline void set_has_view1id();
  inline void clear_has_view1id();
  inline void set_has_view2id();
  inline void clear_has_view2id();
  inline void set_has_xdiff();
  inline void clear_has_xdiff();
  inline void set_has_ydiff();
  inline void clear_has_ydiff();
  inline void set_has_anglediff();
  inline void clear_has_anglediff();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 track1id_;
  ::google::protobuf::int32 track2id_;
  ::google::protobuf::int32 view1id_;
  ::google::protobuf::int32 view2id_;
  double xdiff_;
  double ydiff_;
  double anglediff_;
  friend void  protobuf_AddDesc_trackInfo_2eproto();
  friend void protobuf_AssignDesc_trackInfo_2eproto();
  friend void protobuf_ShutdownFile_trackInfo_2eproto();

  void InitAsDefaultInstance();
  static Relation2dBetweenTracks* default_instance_;
};
// -------------------------------------------------------------------

class Relation3dBetweenTracks : public ::google::protobuf::Message {
 public:
  Relation3dBetweenTracks();
  virtual ~Relation3dBetweenTracks();

  Relation3dBetweenTracks(const Relation3dBetweenTracks& from);

  inline Relation3dBetweenTracks& operator=(const Relation3dBetweenTracks& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Relation3dBetweenTracks& default_instance();

  void Swap(Relation3dBetweenTracks* other);

  // implements Message ----------------------------------------------

  Relation3dBetweenTracks* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Relation3dBetweenTracks& from);
  void MergeFrom(const Relation3dBetweenTracks& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 track1Id = 1 [default = 0];
  inline bool has_track1id() const;
  inline void clear_track1id();
  static const int kTrack1IdFieldNumber = 1;
  inline ::google::protobuf::int32 track1id() const;
  inline void set_track1id(::google::protobuf::int32 value);

  // required int32 track2Id = 2 [default = 0];
  inline bool has_track2id() const;
  inline void clear_track2id();
  static const int kTrack2IdFieldNumber = 2;
  inline ::google::protobuf::int32 track2id() const;
  inline void set_track2id(::google::protobuf::int32 value);

  // required int32 view1Id = 3 [default = 0];
  inline bool has_view1id() const;
  inline void clear_view1id();
  static const int kView1IdFieldNumber = 3;
  inline ::google::protobuf::int32 view1id() const;
  inline void set_view1id(::google::protobuf::int32 value);

  // required int32 view2Id = 4 [default = 0];
  inline bool has_view2id() const;
  inline void clear_view2id();
  static const int kView2IdFieldNumber = 4;
  inline ::google::protobuf::int32 view2id() const;
  inline void set_view2id(::google::protobuf::int32 value);

  // required double xDiff = 5 [default = 0];
  inline bool has_xdiff() const;
  inline void clear_xdiff();
  static const int kXDiffFieldNumber = 5;
  inline double xdiff() const;
  inline void set_xdiff(double value);

  // required double yDiff = 6 [default = 0];
  inline bool has_ydiff() const;
  inline void clear_ydiff();
  static const int kYDiffFieldNumber = 6;
  inline double ydiff() const;
  inline void set_ydiff(double value);

  // required double zDiff = 7 [default = 0];
  inline bool has_zdiff() const;
  inline void clear_zdiff();
  static const int kZDiffFieldNumber = 7;
  inline double zdiff() const;
  inline void set_zdiff(double value);

  // required double yaw = 8 [default = 0];
  inline bool has_yaw() const;
  inline void clear_yaw();
  static const int kYawFieldNumber = 8;
  inline double yaw() const;
  inline void set_yaw(double value);

  // required double pitch = 9 [default = 0];
  inline bool has_pitch() const;
  inline void clear_pitch();
  static const int kPitchFieldNumber = 9;
  inline double pitch() const;
  inline void set_pitch(double value);

  // required double roll = 10 [default = 0];
  inline bool has_roll() const;
  inline void clear_roll();
  static const int kRollFieldNumber = 10;
  inline double roll() const;
  inline void set_roll(double value);

  // @@protoc_insertion_point(class_scope:blindfind.Relation3dBetweenTracks)
 private:
  inline void set_has_track1id();
  inline void clear_has_track1id();
  inline void set_has_track2id();
  inline void clear_has_track2id();
  inline void set_has_view1id();
  inline void clear_has_view1id();
  inline void set_has_view2id();
  inline void clear_has_view2id();
  inline void set_has_xdiff();
  inline void clear_has_xdiff();
  inline void set_has_ydiff();
  inline void clear_has_ydiff();
  inline void set_has_zdiff();
  inline void clear_has_zdiff();
  inline void set_has_yaw();
  inline void clear_has_yaw();
  inline void set_has_pitch();
  inline void clear_has_pitch();
  inline void set_has_roll();
  inline void clear_has_roll();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 track1id_;
  ::google::protobuf::int32 track2id_;
  ::google::protobuf::int32 view1id_;
  ::google::protobuf::int32 view2id_;
  double xdiff_;
  double ydiff_;
  double zdiff_;
  double yaw_;
  double pitch_;
  double roll_;
  friend void  protobuf_AddDesc_trackInfo_2eproto();
  friend void protobuf_AssignDesc_trackInfo_2eproto();
  friend void protobuf_ShutdownFile_trackInfo_2eproto();

  void InitAsDefaultInstance();
  static Relation3dBetweenTracks* default_instance_;
};
// -------------------------------------------------------------------

class View : public ::google::protobuf::Message {
 public:
  View();
  virtual ~View();

  View(const View& from);

  inline View& operator=(const View& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const View& default_instance();

  void Swap(View* other);

  // implements Message ----------------------------------------------

  View* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const View& from);
  void MergeFrom(const View& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string imageDir = 1;
  inline bool has_imagedir() const;
  inline void clear_imagedir();
  static const int kImageDirFieldNumber = 1;
  inline const ::std::string& imagedir() const;
  inline void set_imagedir(const ::std::string& value);
  inline void set_imagedir(const char* value);
  inline void set_imagedir(const char* value, size_t size);
  inline ::std::string* mutable_imagedir();
  inline ::std::string* release_imagedir();
  inline void set_allocated_imagedir(::std::string* imagedir);

  // optional string featureDir = 2;
  inline bool has_featuredir() const;
  inline void clear_featuredir();
  static const int kFeatureDirFieldNumber = 2;
  inline const ::std::string& featuredir() const;
  inline void set_featuredir(const ::std::string& value);
  inline void set_featuredir(const char* value);
  inline void set_featuredir(const char* value, size_t size);
  inline ::std::string* mutable_featuredir();
  inline ::std::string* release_featuredir();
  inline void set_allocated_featuredir(::std::string* featuredir);

  // optional .blindfind.Relation2d relation2d = 3;
  inline bool has_relation2d() const;
  inline void clear_relation2d();
  static const int kRelation2DFieldNumber = 3;
  inline const ::blindfind::Relation2d& relation2d() const;
  inline ::blindfind::Relation2d* mutable_relation2d();
  inline ::blindfind::Relation2d* release_relation2d();
  inline void set_allocated_relation2d(::blindfind::Relation2d* relation2d);

  // optional .blindfind.Relation3d relation3d = 4;
  inline bool has_relation3d() const;
  inline void clear_relation3d();
  static const int kRelation3DFieldNumber = 4;
  inline const ::blindfind::Relation3d& relation3d() const;
  inline ::blindfind::Relation3d* mutable_relation3d();
  inline ::blindfind::Relation3d* release_relation3d();
  inline void set_allocated_relation3d(::blindfind::Relation3d* relation3d);

  // @@protoc_insertion_point(class_scope:blindfind.View)
 private:
  inline void set_has_imagedir();
  inline void clear_has_imagedir();
  inline void set_has_featuredir();
  inline void clear_has_featuredir();
  inline void set_has_relation2d();
  inline void clear_has_relation2d();
  inline void set_has_relation3d();
  inline void clear_has_relation3d();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* imagedir_;
  ::std::string* featuredir_;
  ::blindfind::Relation2d* relation2d_;
  ::blindfind::Relation3d* relation3d_;
  friend void  protobuf_AddDesc_trackInfo_2eproto();
  friend void protobuf_AssignDesc_trackInfo_2eproto();
  friend void protobuf_ShutdownFile_trackInfo_2eproto();

  void InitAsDefaultInstance();
  static View* default_instance_;
};
// -------------------------------------------------------------------

class Track : public ::google::protobuf::Message {
 public:
  Track();
  virtual ~Track();

  Track(const Track& from);

  inline Track& operator=(const Track& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Track& default_instance();

  void Swap(Track* other);

  // implements Message ----------------------------------------------

  Track* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Track& from);
  void MergeFrom(const Track& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 viewNum = 1 [default = 0];
  inline bool has_viewnum() const;
  inline void clear_viewnum();
  static const int kViewNumFieldNumber = 1;
  inline ::google::protobuf::int32 viewnum() const;
  inline void set_viewnum(::google::protobuf::int32 value);

  // repeated .blindfind.View view = 2;
  inline int view_size() const;
  inline void clear_view();
  static const int kViewFieldNumber = 2;
  inline const ::blindfind::View& view(int index) const;
  inline ::blindfind::View* mutable_view(int index);
  inline ::blindfind::View* add_view();
  inline const ::google::protobuf::RepeatedPtrField< ::blindfind::View >&
      view() const;
  inline ::google::protobuf::RepeatedPtrField< ::blindfind::View >*
      mutable_view();

  // @@protoc_insertion_point(class_scope:blindfind.Track)
 private:
  inline void set_has_viewnum();
  inline void clear_has_viewnum();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::blindfind::View > view_;
  ::google::protobuf::int32 viewnum_;
  friend void  protobuf_AddDesc_trackInfo_2eproto();
  friend void protobuf_AssignDesc_trackInfo_2eproto();
  friend void protobuf_ShutdownFile_trackInfo_2eproto();

  void InitAsDefaultInstance();
  static Track* default_instance_;
};
// -------------------------------------------------------------------

class AllRelations : public ::google::protobuf::Message {
 public:
  AllRelations();
  virtual ~AllRelations();

  AllRelations(const AllRelations& from);

  inline AllRelations& operator=(const AllRelations& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AllRelations& default_instance();

  void Swap(AllRelations* other);

  // implements Message ----------------------------------------------

  AllRelations* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AllRelations& from);
  void MergeFrom(const AllRelations& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .blindfind.Relation2dBetweenTracks relation2dBetweenTracks = 1;
  inline int relation2dbetweentracks_size() const;
  inline void clear_relation2dbetweentracks();
  static const int kRelation2DBetweenTracksFieldNumber = 1;
  inline const ::blindfind::Relation2dBetweenTracks& relation2dbetweentracks(int index) const;
  inline ::blindfind::Relation2dBetweenTracks* mutable_relation2dbetweentracks(int index);
  inline ::blindfind::Relation2dBetweenTracks* add_relation2dbetweentracks();
  inline const ::google::protobuf::RepeatedPtrField< ::blindfind::Relation2dBetweenTracks >&
      relation2dbetweentracks() const;
  inline ::google::protobuf::RepeatedPtrField< ::blindfind::Relation2dBetweenTracks >*
      mutable_relation2dbetweentracks();

  // repeated .blindfind.Relation3dBetweenTracks relation3dBetweenTracks = 2;
  inline int relation3dbetweentracks_size() const;
  inline void clear_relation3dbetweentracks();
  static const int kRelation3DBetweenTracksFieldNumber = 2;
  inline const ::blindfind::Relation3dBetweenTracks& relation3dbetweentracks(int index) const;
  inline ::blindfind::Relation3dBetweenTracks* mutable_relation3dbetweentracks(int index);
  inline ::blindfind::Relation3dBetweenTracks* add_relation3dbetweentracks();
  inline const ::google::protobuf::RepeatedPtrField< ::blindfind::Relation3dBetweenTracks >&
      relation3dbetweentracks() const;
  inline ::google::protobuf::RepeatedPtrField< ::blindfind::Relation3dBetweenTracks >*
      mutable_relation3dbetweentracks();

  // @@protoc_insertion_point(class_scope:blindfind.AllRelations)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::blindfind::Relation2dBetweenTracks > relation2dbetweentracks_;
  ::google::protobuf::RepeatedPtrField< ::blindfind::Relation3dBetweenTracks > relation3dbetweentracks_;
  friend void  protobuf_AddDesc_trackInfo_2eproto();
  friend void protobuf_AssignDesc_trackInfo_2eproto();
  friend void protobuf_ShutdownFile_trackInfo_2eproto();

  void InitAsDefaultInstance();
  static AllRelations* default_instance_;
};
// -------------------------------------------------------------------

class TrackMap : public ::google::protobuf::Message {
 public:
  TrackMap();
  virtual ~TrackMap();

  TrackMap(const TrackMap& from);

  inline TrackMap& operator=(const TrackMap& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TrackMap& default_instance();

  void Swap(TrackMap* other);

  // implements Message ----------------------------------------------

  TrackMap* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TrackMap& from);
  void MergeFrom(const TrackMap& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .blindfind.Track track = 1;
  inline int track_size() const;
  inline void clear_track();
  static const int kTrackFieldNumber = 1;
  inline const ::blindfind::Track& track(int index) const;
  inline ::blindfind::Track* mutable_track(int index);
  inline ::blindfind::Track* add_track();
  inline const ::google::protobuf::RepeatedPtrField< ::blindfind::Track >&
      track() const;
  inline ::google::protobuf::RepeatedPtrField< ::blindfind::Track >*
      mutable_track();

  // required .blindfind.AllRelations allRelations = 2;
  inline bool has_allrelations() const;
  inline void clear_allrelations();
  static const int kAllRelationsFieldNumber = 2;
  inline const ::blindfind::AllRelations& allrelations() const;
  inline ::blindfind::AllRelations* mutable_allrelations();
  inline ::blindfind::AllRelations* release_allrelations();
  inline void set_allocated_allrelations(::blindfind::AllRelations* allrelations);

  // @@protoc_insertion_point(class_scope:blindfind.TrackMap)
 private:
  inline void set_has_allrelations();
  inline void clear_has_allrelations();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::blindfind::Track > track_;
  ::blindfind::AllRelations* allrelations_;
  friend void  protobuf_AddDesc_trackInfo_2eproto();
  friend void protobuf_AssignDesc_trackInfo_2eproto();
  friend void protobuf_ShutdownFile_trackInfo_2eproto();

  void InitAsDefaultInstance();
  static TrackMap* default_instance_;
};
// ===================================================================


// ===================================================================

// Relation2d

// required double xDiff = 1 [default = 0];
inline bool Relation2d::has_xdiff() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Relation2d::set_has_xdiff() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Relation2d::clear_has_xdiff() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Relation2d::clear_xdiff() {
  xdiff_ = 0;
  clear_has_xdiff();
}
inline double Relation2d::xdiff() const {
  // @@protoc_insertion_point(field_get:blindfind.Relation2d.xDiff)
  return xdiff_;
}
inline void Relation2d::set_xdiff(double value) {
  set_has_xdiff();
  xdiff_ = value;
  // @@protoc_insertion_point(field_set:blindfind.Relation2d.xDiff)
}

// required double yDiff = 2 [default = 0];
inline bool Relation2d::has_ydiff() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Relation2d::set_has_ydiff() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Relation2d::clear_has_ydiff() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Relation2d::clear_ydiff() {
  ydiff_ = 0;
  clear_has_ydiff();
}
inline double Relation2d::ydiff() const {
  // @@protoc_insertion_point(field_get:blindfind.Relation2d.yDiff)
  return ydiff_;
}
inline void Relation2d::set_ydiff(double value) {
  set_has_ydiff();
  ydiff_ = value;
  // @@protoc_insertion_point(field_set:blindfind.Relation2d.yDiff)
}

// required double angleDiff = 3 [default = 0];
inline bool Relation2d::has_anglediff() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Relation2d::set_has_anglediff() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Relation2d::clear_has_anglediff() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Relation2d::clear_anglediff() {
  anglediff_ = 0;
  clear_has_anglediff();
}
inline double Relation2d::anglediff() const {
  // @@protoc_insertion_point(field_get:blindfind.Relation2d.angleDiff)
  return anglediff_;
}
inline void Relation2d::set_anglediff(double value) {
  set_has_anglediff();
  anglediff_ = value;
  // @@protoc_insertion_point(field_set:blindfind.Relation2d.angleDiff)
}

// -------------------------------------------------------------------

// Relation3d

// required double xDiff = 1 [default = 0];
inline bool Relation3d::has_xdiff() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Relation3d::set_has_xdiff() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Relation3d::clear_has_xdiff() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Relation3d::clear_xdiff() {
  xdiff_ = 0;
  clear_has_xdiff();
}
inline double Relation3d::xdiff() const {
  // @@protoc_insertion_point(field_get:blindfind.Relation3d.xDiff)
  return xdiff_;
}
inline void Relation3d::set_xdiff(double value) {
  set_has_xdiff();
  xdiff_ = value;
  // @@protoc_insertion_point(field_set:blindfind.Relation3d.xDiff)
}

// required double yDiff = 2 [default = 0];
inline bool Relation3d::has_ydiff() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Relation3d::set_has_ydiff() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Relation3d::clear_has_ydiff() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Relation3d::clear_ydiff() {
  ydiff_ = 0;
  clear_has_ydiff();
}
inline double Relation3d::ydiff() const {
  // @@protoc_insertion_point(field_get:blindfind.Relation3d.yDiff)
  return ydiff_;
}
inline void Relation3d::set_ydiff(double value) {
  set_has_ydiff();
  ydiff_ = value;
  // @@protoc_insertion_point(field_set:blindfind.Relation3d.yDiff)
}

// required double zDiff = 3 [default = 0];
inline bool Relation3d::has_zdiff() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Relation3d::set_has_zdiff() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Relation3d::clear_has_zdiff() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Relation3d::clear_zdiff() {
  zdiff_ = 0;
  clear_has_zdiff();
}
inline double Relation3d::zdiff() const {
  // @@protoc_insertion_point(field_get:blindfind.Relation3d.zDiff)
  return zdiff_;
}
inline void Relation3d::set_zdiff(double value) {
  set_has_zdiff();
  zdiff_ = value;
  // @@protoc_insertion_point(field_set:blindfind.Relation3d.zDiff)
}

// required double yaw = 4 [default = 0];
inline bool Relation3d::has_yaw() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Relation3d::set_has_yaw() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Relation3d::clear_has_yaw() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Relation3d::clear_yaw() {
  yaw_ = 0;
  clear_has_yaw();
}
inline double Relation3d::yaw() const {
  // @@protoc_insertion_point(field_get:blindfind.Relation3d.yaw)
  return yaw_;
}
inline void Relation3d::set_yaw(double value) {
  set_has_yaw();
  yaw_ = value;
  // @@protoc_insertion_point(field_set:blindfind.Relation3d.yaw)
}

// required double pitch = 5 [default = 0];
inline bool Relation3d::has_pitch() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Relation3d::set_has_pitch() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Relation3d::clear_has_pitch() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Relation3d::clear_pitch() {
  pitch_ = 0;
  clear_has_pitch();
}
inline double Relation3d::pitch() const {
  // @@protoc_insertion_point(field_get:blindfind.Relation3d.pitch)
  return pitch_;
}
inline void Relation3d::set_pitch(double value) {
  set_has_pitch();
  pitch_ = value;
  // @@protoc_insertion_point(field_set:blindfind.Relation3d.pitch)
}

// required double roll = 6 [default = 0];
inline bool Relation3d::has_roll() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Relation3d::set_has_roll() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Relation3d::clear_has_roll() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Relation3d::clear_roll() {
  roll_ = 0;
  clear_has_roll();
}
inline double Relation3d::roll() const {
  // @@protoc_insertion_point(field_get:blindfind.Relation3d.roll)
  return roll_;
}
inline void Relation3d::set_roll(double value) {
  set_has_roll();
  roll_ = value;
  // @@protoc_insertion_point(field_set:blindfind.Relation3d.roll)
}

// -------------------------------------------------------------------

// Relation2dBetweenTracks

// required int32 track1Id = 1 [default = 0];
inline bool Relation2dBetweenTracks::has_track1id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Relation2dBetweenTracks::set_has_track1id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Relation2dBetweenTracks::clear_has_track1id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Relation2dBetweenTracks::clear_track1id() {
  track1id_ = 0;
  clear_has_track1id();
}
inline ::google::protobuf::int32 Relation2dBetweenTracks::track1id() const {
  // @@protoc_insertion_point(field_get:blindfind.Relation2dBetweenTracks.track1Id)
  return track1id_;
}
inline void Relation2dBetweenTracks::set_track1id(::google::protobuf::int32 value) {
  set_has_track1id();
  track1id_ = value;
  // @@protoc_insertion_point(field_set:blindfind.Relation2dBetweenTracks.track1Id)
}

// required int32 track2Id = 2 [default = 0];
inline bool Relation2dBetweenTracks::has_track2id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Relation2dBetweenTracks::set_has_track2id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Relation2dBetweenTracks::clear_has_track2id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Relation2dBetweenTracks::clear_track2id() {
  track2id_ = 0;
  clear_has_track2id();
}
inline ::google::protobuf::int32 Relation2dBetweenTracks::track2id() const {
  // @@protoc_insertion_point(field_get:blindfind.Relation2dBetweenTracks.track2Id)
  return track2id_;
}
inline void Relation2dBetweenTracks::set_track2id(::google::protobuf::int32 value) {
  set_has_track2id();
  track2id_ = value;
  // @@protoc_insertion_point(field_set:blindfind.Relation2dBetweenTracks.track2Id)
}

// required int32 view1Id = 3 [default = 0];
inline bool Relation2dBetweenTracks::has_view1id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Relation2dBetweenTracks::set_has_view1id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Relation2dBetweenTracks::clear_has_view1id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Relation2dBetweenTracks::clear_view1id() {
  view1id_ = 0;
  clear_has_view1id();
}
inline ::google::protobuf::int32 Relation2dBetweenTracks::view1id() const {
  // @@protoc_insertion_point(field_get:blindfind.Relation2dBetweenTracks.view1Id)
  return view1id_;
}
inline void Relation2dBetweenTracks::set_view1id(::google::protobuf::int32 value) {
  set_has_view1id();
  view1id_ = value;
  // @@protoc_insertion_point(field_set:blindfind.Relation2dBetweenTracks.view1Id)
}

// required int32 view2Id = 4 [default = 0];
inline bool Relation2dBetweenTracks::has_view2id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Relation2dBetweenTracks::set_has_view2id() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Relation2dBetweenTracks::clear_has_view2id() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Relation2dBetweenTracks::clear_view2id() {
  view2id_ = 0;
  clear_has_view2id();
}
inline ::google::protobuf::int32 Relation2dBetweenTracks::view2id() const {
  // @@protoc_insertion_point(field_get:blindfind.Relation2dBetweenTracks.view2Id)
  return view2id_;
}
inline void Relation2dBetweenTracks::set_view2id(::google::protobuf::int32 value) {
  set_has_view2id();
  view2id_ = value;
  // @@protoc_insertion_point(field_set:blindfind.Relation2dBetweenTracks.view2Id)
}

// required double xDiff = 5 [default = 0];
inline bool Relation2dBetweenTracks::has_xdiff() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Relation2dBetweenTracks::set_has_xdiff() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Relation2dBetweenTracks::clear_has_xdiff() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Relation2dBetweenTracks::clear_xdiff() {
  xdiff_ = 0;
  clear_has_xdiff();
}
inline double Relation2dBetweenTracks::xdiff() const {
  // @@protoc_insertion_point(field_get:blindfind.Relation2dBetweenTracks.xDiff)
  return xdiff_;
}
inline void Relation2dBetweenTracks::set_xdiff(double value) {
  set_has_xdiff();
  xdiff_ = value;
  // @@protoc_insertion_point(field_set:blindfind.Relation2dBetweenTracks.xDiff)
}

// required double yDiff = 6 [default = 0];
inline bool Relation2dBetweenTracks::has_ydiff() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Relation2dBetweenTracks::set_has_ydiff() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Relation2dBetweenTracks::clear_has_ydiff() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Relation2dBetweenTracks::clear_ydiff() {
  ydiff_ = 0;
  clear_has_ydiff();
}
inline double Relation2dBetweenTracks::ydiff() const {
  // @@protoc_insertion_point(field_get:blindfind.Relation2dBetweenTracks.yDiff)
  return ydiff_;
}
inline void Relation2dBetweenTracks::set_ydiff(double value) {
  set_has_ydiff();
  ydiff_ = value;
  // @@protoc_insertion_point(field_set:blindfind.Relation2dBetweenTracks.yDiff)
}

// required double angleDiff = 7 [default = 0];
inline bool Relation2dBetweenTracks::has_anglediff() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Relation2dBetweenTracks::set_has_anglediff() {
  _has_bits_[0] |= 0x00000040u;
}
inline void Relation2dBetweenTracks::clear_has_anglediff() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void Relation2dBetweenTracks::clear_anglediff() {
  anglediff_ = 0;
  clear_has_anglediff();
}
inline double Relation2dBetweenTracks::anglediff() const {
  // @@protoc_insertion_point(field_get:blindfind.Relation2dBetweenTracks.angleDiff)
  return anglediff_;
}
inline void Relation2dBetweenTracks::set_anglediff(double value) {
  set_has_anglediff();
  anglediff_ = value;
  // @@protoc_insertion_point(field_set:blindfind.Relation2dBetweenTracks.angleDiff)
}

// -------------------------------------------------------------------

// Relation3dBetweenTracks

// required int32 track1Id = 1 [default = 0];
inline bool Relation3dBetweenTracks::has_track1id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Relation3dBetweenTracks::set_has_track1id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Relation3dBetweenTracks::clear_has_track1id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Relation3dBetweenTracks::clear_track1id() {
  track1id_ = 0;
  clear_has_track1id();
}
inline ::google::protobuf::int32 Relation3dBetweenTracks::track1id() const {
  // @@protoc_insertion_point(field_get:blindfind.Relation3dBetweenTracks.track1Id)
  return track1id_;
}
inline void Relation3dBetweenTracks::set_track1id(::google::protobuf::int32 value) {
  set_has_track1id();
  track1id_ = value;
  // @@protoc_insertion_point(field_set:blindfind.Relation3dBetweenTracks.track1Id)
}

// required int32 track2Id = 2 [default = 0];
inline bool Relation3dBetweenTracks::has_track2id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Relation3dBetweenTracks::set_has_track2id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Relation3dBetweenTracks::clear_has_track2id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Relation3dBetweenTracks::clear_track2id() {
  track2id_ = 0;
  clear_has_track2id();
}
inline ::google::protobuf::int32 Relation3dBetweenTracks::track2id() const {
  // @@protoc_insertion_point(field_get:blindfind.Relation3dBetweenTracks.track2Id)
  return track2id_;
}
inline void Relation3dBetweenTracks::set_track2id(::google::protobuf::int32 value) {
  set_has_track2id();
  track2id_ = value;
  // @@protoc_insertion_point(field_set:blindfind.Relation3dBetweenTracks.track2Id)
}

// required int32 view1Id = 3 [default = 0];
inline bool Relation3dBetweenTracks::has_view1id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Relation3dBetweenTracks::set_has_view1id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Relation3dBetweenTracks::clear_has_view1id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Relation3dBetweenTracks::clear_view1id() {
  view1id_ = 0;
  clear_has_view1id();
}
inline ::google::protobuf::int32 Relation3dBetweenTracks::view1id() const {
  // @@protoc_insertion_point(field_get:blindfind.Relation3dBetweenTracks.view1Id)
  return view1id_;
}
inline void Relation3dBetweenTracks::set_view1id(::google::protobuf::int32 value) {
  set_has_view1id();
  view1id_ = value;
  // @@protoc_insertion_point(field_set:blindfind.Relation3dBetweenTracks.view1Id)
}

// required int32 view2Id = 4 [default = 0];
inline bool Relation3dBetweenTracks::has_view2id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Relation3dBetweenTracks::set_has_view2id() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Relation3dBetweenTracks::clear_has_view2id() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Relation3dBetweenTracks::clear_view2id() {
  view2id_ = 0;
  clear_has_view2id();
}
inline ::google::protobuf::int32 Relation3dBetweenTracks::view2id() const {
  // @@protoc_insertion_point(field_get:blindfind.Relation3dBetweenTracks.view2Id)
  return view2id_;
}
inline void Relation3dBetweenTracks::set_view2id(::google::protobuf::int32 value) {
  set_has_view2id();
  view2id_ = value;
  // @@protoc_insertion_point(field_set:blindfind.Relation3dBetweenTracks.view2Id)
}

// required double xDiff = 5 [default = 0];
inline bool Relation3dBetweenTracks::has_xdiff() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Relation3dBetweenTracks::set_has_xdiff() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Relation3dBetweenTracks::clear_has_xdiff() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Relation3dBetweenTracks::clear_xdiff() {
  xdiff_ = 0;
  clear_has_xdiff();
}
inline double Relation3dBetweenTracks::xdiff() const {
  // @@protoc_insertion_point(field_get:blindfind.Relation3dBetweenTracks.xDiff)
  return xdiff_;
}
inline void Relation3dBetweenTracks::set_xdiff(double value) {
  set_has_xdiff();
  xdiff_ = value;
  // @@protoc_insertion_point(field_set:blindfind.Relation3dBetweenTracks.xDiff)
}

// required double yDiff = 6 [default = 0];
inline bool Relation3dBetweenTracks::has_ydiff() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Relation3dBetweenTracks::set_has_ydiff() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Relation3dBetweenTracks::clear_has_ydiff() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Relation3dBetweenTracks::clear_ydiff() {
  ydiff_ = 0;
  clear_has_ydiff();
}
inline double Relation3dBetweenTracks::ydiff() const {
  // @@protoc_insertion_point(field_get:blindfind.Relation3dBetweenTracks.yDiff)
  return ydiff_;
}
inline void Relation3dBetweenTracks::set_ydiff(double value) {
  set_has_ydiff();
  ydiff_ = value;
  // @@protoc_insertion_point(field_set:blindfind.Relation3dBetweenTracks.yDiff)
}

// required double zDiff = 7 [default = 0];
inline bool Relation3dBetweenTracks::has_zdiff() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Relation3dBetweenTracks::set_has_zdiff() {
  _has_bits_[0] |= 0x00000040u;
}
inline void Relation3dBetweenTracks::clear_has_zdiff() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void Relation3dBetweenTracks::clear_zdiff() {
  zdiff_ = 0;
  clear_has_zdiff();
}
inline double Relation3dBetweenTracks::zdiff() const {
  // @@protoc_insertion_point(field_get:blindfind.Relation3dBetweenTracks.zDiff)
  return zdiff_;
}
inline void Relation3dBetweenTracks::set_zdiff(double value) {
  set_has_zdiff();
  zdiff_ = value;
  // @@protoc_insertion_point(field_set:blindfind.Relation3dBetweenTracks.zDiff)
}

// required double yaw = 8 [default = 0];
inline bool Relation3dBetweenTracks::has_yaw() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void Relation3dBetweenTracks::set_has_yaw() {
  _has_bits_[0] |= 0x00000080u;
}
inline void Relation3dBetweenTracks::clear_has_yaw() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void Relation3dBetweenTracks::clear_yaw() {
  yaw_ = 0;
  clear_has_yaw();
}
inline double Relation3dBetweenTracks::yaw() const {
  // @@protoc_insertion_point(field_get:blindfind.Relation3dBetweenTracks.yaw)
  return yaw_;
}
inline void Relation3dBetweenTracks::set_yaw(double value) {
  set_has_yaw();
  yaw_ = value;
  // @@protoc_insertion_point(field_set:blindfind.Relation3dBetweenTracks.yaw)
}

// required double pitch = 9 [default = 0];
inline bool Relation3dBetweenTracks::has_pitch() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void Relation3dBetweenTracks::set_has_pitch() {
  _has_bits_[0] |= 0x00000100u;
}
inline void Relation3dBetweenTracks::clear_has_pitch() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void Relation3dBetweenTracks::clear_pitch() {
  pitch_ = 0;
  clear_has_pitch();
}
inline double Relation3dBetweenTracks::pitch() const {
  // @@protoc_insertion_point(field_get:blindfind.Relation3dBetweenTracks.pitch)
  return pitch_;
}
inline void Relation3dBetweenTracks::set_pitch(double value) {
  set_has_pitch();
  pitch_ = value;
  // @@protoc_insertion_point(field_set:blindfind.Relation3dBetweenTracks.pitch)
}

// required double roll = 10 [default = 0];
inline bool Relation3dBetweenTracks::has_roll() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void Relation3dBetweenTracks::set_has_roll() {
  _has_bits_[0] |= 0x00000200u;
}
inline void Relation3dBetweenTracks::clear_has_roll() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void Relation3dBetweenTracks::clear_roll() {
  roll_ = 0;
  clear_has_roll();
}
inline double Relation3dBetweenTracks::roll() const {
  // @@protoc_insertion_point(field_get:blindfind.Relation3dBetweenTracks.roll)
  return roll_;
}
inline void Relation3dBetweenTracks::set_roll(double value) {
  set_has_roll();
  roll_ = value;
  // @@protoc_insertion_point(field_set:blindfind.Relation3dBetweenTracks.roll)
}

// -------------------------------------------------------------------

// View

// optional string imageDir = 1;
inline bool View::has_imagedir() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void View::set_has_imagedir() {
  _has_bits_[0] |= 0x00000001u;
}
inline void View::clear_has_imagedir() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void View::clear_imagedir() {
  if (imagedir_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    imagedir_->clear();
  }
  clear_has_imagedir();
}
inline const ::std::string& View::imagedir() const {
  // @@protoc_insertion_point(field_get:blindfind.View.imageDir)
  return *imagedir_;
}
inline void View::set_imagedir(const ::std::string& value) {
  set_has_imagedir();
  if (imagedir_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    imagedir_ = new ::std::string;
  }
  imagedir_->assign(value);
  // @@protoc_insertion_point(field_set:blindfind.View.imageDir)
}
inline void View::set_imagedir(const char* value) {
  set_has_imagedir();
  if (imagedir_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    imagedir_ = new ::std::string;
  }
  imagedir_->assign(value);
  // @@protoc_insertion_point(field_set_char:blindfind.View.imageDir)
}
inline void View::set_imagedir(const char* value, size_t size) {
  set_has_imagedir();
  if (imagedir_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    imagedir_ = new ::std::string;
  }
  imagedir_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:blindfind.View.imageDir)
}
inline ::std::string* View::mutable_imagedir() {
  set_has_imagedir();
  if (imagedir_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    imagedir_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:blindfind.View.imageDir)
  return imagedir_;
}
inline ::std::string* View::release_imagedir() {
  clear_has_imagedir();
  if (imagedir_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = imagedir_;
    imagedir_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void View::set_allocated_imagedir(::std::string* imagedir) {
  if (imagedir_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete imagedir_;
  }
  if (imagedir) {
    set_has_imagedir();
    imagedir_ = imagedir;
  } else {
    clear_has_imagedir();
    imagedir_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:blindfind.View.imageDir)
}

// optional string featureDir = 2;
inline bool View::has_featuredir() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void View::set_has_featuredir() {
  _has_bits_[0] |= 0x00000002u;
}
inline void View::clear_has_featuredir() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void View::clear_featuredir() {
  if (featuredir_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    featuredir_->clear();
  }
  clear_has_featuredir();
}
inline const ::std::string& View::featuredir() const {
  // @@protoc_insertion_point(field_get:blindfind.View.featureDir)
  return *featuredir_;
}
inline void View::set_featuredir(const ::std::string& value) {
  set_has_featuredir();
  if (featuredir_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    featuredir_ = new ::std::string;
  }
  featuredir_->assign(value);
  // @@protoc_insertion_point(field_set:blindfind.View.featureDir)
}
inline void View::set_featuredir(const char* value) {
  set_has_featuredir();
  if (featuredir_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    featuredir_ = new ::std::string;
  }
  featuredir_->assign(value);
  // @@protoc_insertion_point(field_set_char:blindfind.View.featureDir)
}
inline void View::set_featuredir(const char* value, size_t size) {
  set_has_featuredir();
  if (featuredir_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    featuredir_ = new ::std::string;
  }
  featuredir_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:blindfind.View.featureDir)
}
inline ::std::string* View::mutable_featuredir() {
  set_has_featuredir();
  if (featuredir_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    featuredir_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:blindfind.View.featureDir)
  return featuredir_;
}
inline ::std::string* View::release_featuredir() {
  clear_has_featuredir();
  if (featuredir_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = featuredir_;
    featuredir_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void View::set_allocated_featuredir(::std::string* featuredir) {
  if (featuredir_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete featuredir_;
  }
  if (featuredir) {
    set_has_featuredir();
    featuredir_ = featuredir;
  } else {
    clear_has_featuredir();
    featuredir_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:blindfind.View.featureDir)
}

// optional .blindfind.Relation2d relation2d = 3;
inline bool View::has_relation2d() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void View::set_has_relation2d() {
  _has_bits_[0] |= 0x00000004u;
}
inline void View::clear_has_relation2d() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void View::clear_relation2d() {
  if (relation2d_ != NULL) relation2d_->::blindfind::Relation2d::Clear();
  clear_has_relation2d();
}
inline const ::blindfind::Relation2d& View::relation2d() const {
  // @@protoc_insertion_point(field_get:blindfind.View.relation2d)
  return relation2d_ != NULL ? *relation2d_ : *default_instance_->relation2d_;
}
inline ::blindfind::Relation2d* View::mutable_relation2d() {
  set_has_relation2d();
  if (relation2d_ == NULL) relation2d_ = new ::blindfind::Relation2d;
  // @@protoc_insertion_point(field_mutable:blindfind.View.relation2d)
  return relation2d_;
}
inline ::blindfind::Relation2d* View::release_relation2d() {
  clear_has_relation2d();
  ::blindfind::Relation2d* temp = relation2d_;
  relation2d_ = NULL;
  return temp;
}
inline void View::set_allocated_relation2d(::blindfind::Relation2d* relation2d) {
  delete relation2d_;
  relation2d_ = relation2d;
  if (relation2d) {
    set_has_relation2d();
  } else {
    clear_has_relation2d();
  }
  // @@protoc_insertion_point(field_set_allocated:blindfind.View.relation2d)
}

// optional .blindfind.Relation3d relation3d = 4;
inline bool View::has_relation3d() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void View::set_has_relation3d() {
  _has_bits_[0] |= 0x00000008u;
}
inline void View::clear_has_relation3d() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void View::clear_relation3d() {
  if (relation3d_ != NULL) relation3d_->::blindfind::Relation3d::Clear();
  clear_has_relation3d();
}
inline const ::blindfind::Relation3d& View::relation3d() const {
  // @@protoc_insertion_point(field_get:blindfind.View.relation3d)
  return relation3d_ != NULL ? *relation3d_ : *default_instance_->relation3d_;
}
inline ::blindfind::Relation3d* View::mutable_relation3d() {
  set_has_relation3d();
  if (relation3d_ == NULL) relation3d_ = new ::blindfind::Relation3d;
  // @@protoc_insertion_point(field_mutable:blindfind.View.relation3d)
  return relation3d_;
}
inline ::blindfind::Relation3d* View::release_relation3d() {
  clear_has_relation3d();
  ::blindfind::Relation3d* temp = relation3d_;
  relation3d_ = NULL;
  return temp;
}
inline void View::set_allocated_relation3d(::blindfind::Relation3d* relation3d) {
  delete relation3d_;
  relation3d_ = relation3d;
  if (relation3d) {
    set_has_relation3d();
  } else {
    clear_has_relation3d();
  }
  // @@protoc_insertion_point(field_set_allocated:blindfind.View.relation3d)
}

// -------------------------------------------------------------------

// Track

// required int32 viewNum = 1 [default = 0];
inline bool Track::has_viewnum() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Track::set_has_viewnum() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Track::clear_has_viewnum() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Track::clear_viewnum() {
  viewnum_ = 0;
  clear_has_viewnum();
}
inline ::google::protobuf::int32 Track::viewnum() const {
  // @@protoc_insertion_point(field_get:blindfind.Track.viewNum)
  return viewnum_;
}
inline void Track::set_viewnum(::google::protobuf::int32 value) {
  set_has_viewnum();
  viewnum_ = value;
  // @@protoc_insertion_point(field_set:blindfind.Track.viewNum)
}

// repeated .blindfind.View view = 2;
inline int Track::view_size() const {
  return view_.size();
}
inline void Track::clear_view() {
  view_.Clear();
}
inline const ::blindfind::View& Track::view(int index) const {
  // @@protoc_insertion_point(field_get:blindfind.Track.view)
  return view_.Get(index);
}
inline ::blindfind::View* Track::mutable_view(int index) {
  // @@protoc_insertion_point(field_mutable:blindfind.Track.view)
  return view_.Mutable(index);
}
inline ::blindfind::View* Track::add_view() {
  // @@protoc_insertion_point(field_add:blindfind.Track.view)
  return view_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::blindfind::View >&
Track::view() const {
  // @@protoc_insertion_point(field_list:blindfind.Track.view)
  return view_;
}
inline ::google::protobuf::RepeatedPtrField< ::blindfind::View >*
Track::mutable_view() {
  // @@protoc_insertion_point(field_mutable_list:blindfind.Track.view)
  return &view_;
}

// -------------------------------------------------------------------

// AllRelations

// repeated .blindfind.Relation2dBetweenTracks relation2dBetweenTracks = 1;
inline int AllRelations::relation2dbetweentracks_size() const {
  return relation2dbetweentracks_.size();
}
inline void AllRelations::clear_relation2dbetweentracks() {
  relation2dbetweentracks_.Clear();
}
inline const ::blindfind::Relation2dBetweenTracks& AllRelations::relation2dbetweentracks(int index) const {
  // @@protoc_insertion_point(field_get:blindfind.AllRelations.relation2dBetweenTracks)
  return relation2dbetweentracks_.Get(index);
}
inline ::blindfind::Relation2dBetweenTracks* AllRelations::mutable_relation2dbetweentracks(int index) {
  // @@protoc_insertion_point(field_mutable:blindfind.AllRelations.relation2dBetweenTracks)
  return relation2dbetweentracks_.Mutable(index);
}
inline ::blindfind::Relation2dBetweenTracks* AllRelations::add_relation2dbetweentracks() {
  // @@protoc_insertion_point(field_add:blindfind.AllRelations.relation2dBetweenTracks)
  return relation2dbetweentracks_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::blindfind::Relation2dBetweenTracks >&
AllRelations::relation2dbetweentracks() const {
  // @@protoc_insertion_point(field_list:blindfind.AllRelations.relation2dBetweenTracks)
  return relation2dbetweentracks_;
}
inline ::google::protobuf::RepeatedPtrField< ::blindfind::Relation2dBetweenTracks >*
AllRelations::mutable_relation2dbetweentracks() {
  // @@protoc_insertion_point(field_mutable_list:blindfind.AllRelations.relation2dBetweenTracks)
  return &relation2dbetweentracks_;
}

// repeated .blindfind.Relation3dBetweenTracks relation3dBetweenTracks = 2;
inline int AllRelations::relation3dbetweentracks_size() const {
  return relation3dbetweentracks_.size();
}
inline void AllRelations::clear_relation3dbetweentracks() {
  relation3dbetweentracks_.Clear();
}
inline const ::blindfind::Relation3dBetweenTracks& AllRelations::relation3dbetweentracks(int index) const {
  // @@protoc_insertion_point(field_get:blindfind.AllRelations.relation3dBetweenTracks)
  return relation3dbetweentracks_.Get(index);
}
inline ::blindfind::Relation3dBetweenTracks* AllRelations::mutable_relation3dbetweentracks(int index) {
  // @@protoc_insertion_point(field_mutable:blindfind.AllRelations.relation3dBetweenTracks)
  return relation3dbetweentracks_.Mutable(index);
}
inline ::blindfind::Relation3dBetweenTracks* AllRelations::add_relation3dbetweentracks() {
  // @@protoc_insertion_point(field_add:blindfind.AllRelations.relation3dBetweenTracks)
  return relation3dbetweentracks_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::blindfind::Relation3dBetweenTracks >&
AllRelations::relation3dbetweentracks() const {
  // @@protoc_insertion_point(field_list:blindfind.AllRelations.relation3dBetweenTracks)
  return relation3dbetweentracks_;
}
inline ::google::protobuf::RepeatedPtrField< ::blindfind::Relation3dBetweenTracks >*
AllRelations::mutable_relation3dbetweentracks() {
  // @@protoc_insertion_point(field_mutable_list:blindfind.AllRelations.relation3dBetweenTracks)
  return &relation3dbetweentracks_;
}

// -------------------------------------------------------------------

// TrackMap

// repeated .blindfind.Track track = 1;
inline int TrackMap::track_size() const {
  return track_.size();
}
inline void TrackMap::clear_track() {
  track_.Clear();
}
inline const ::blindfind::Track& TrackMap::track(int index) const {
  // @@protoc_insertion_point(field_get:blindfind.TrackMap.track)
  return track_.Get(index);
}
inline ::blindfind::Track* TrackMap::mutable_track(int index) {
  // @@protoc_insertion_point(field_mutable:blindfind.TrackMap.track)
  return track_.Mutable(index);
}
inline ::blindfind::Track* TrackMap::add_track() {
  // @@protoc_insertion_point(field_add:blindfind.TrackMap.track)
  return track_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::blindfind::Track >&
TrackMap::track() const {
  // @@protoc_insertion_point(field_list:blindfind.TrackMap.track)
  return track_;
}
inline ::google::protobuf::RepeatedPtrField< ::blindfind::Track >*
TrackMap::mutable_track() {
  // @@protoc_insertion_point(field_mutable_list:blindfind.TrackMap.track)
  return &track_;
}

// required .blindfind.AllRelations allRelations = 2;
inline bool TrackMap::has_allrelations() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TrackMap::set_has_allrelations() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TrackMap::clear_has_allrelations() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TrackMap::clear_allrelations() {
  if (allrelations_ != NULL) allrelations_->::blindfind::AllRelations::Clear();
  clear_has_allrelations();
}
inline const ::blindfind::AllRelations& TrackMap::allrelations() const {
  // @@protoc_insertion_point(field_get:blindfind.TrackMap.allRelations)
  return allrelations_ != NULL ? *allrelations_ : *default_instance_->allrelations_;
}
inline ::blindfind::AllRelations* TrackMap::mutable_allrelations() {
  set_has_allrelations();
  if (allrelations_ == NULL) allrelations_ = new ::blindfind::AllRelations;
  // @@protoc_insertion_point(field_mutable:blindfind.TrackMap.allRelations)
  return allrelations_;
}
inline ::blindfind::AllRelations* TrackMap::release_allrelations() {
  clear_has_allrelations();
  ::blindfind::AllRelations* temp = allrelations_;
  allrelations_ = NULL;
  return temp;
}
inline void TrackMap::set_allocated_allrelations(::blindfind::AllRelations* allrelations) {
  delete allrelations_;
  allrelations_ = allrelations;
  if (allrelations) {
    set_has_allrelations();
  } else {
    clear_has_allrelations();
  }
  // @@protoc_insertion_point(field_set_allocated:blindfind.TrackMap.allRelations)
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace blindfind

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_trackInfo_2eproto__INCLUDED
