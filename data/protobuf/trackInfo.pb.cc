// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: trackInfo.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "trackInfo.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace blindfind {

namespace {

const ::google::protobuf::Descriptor* Relation2d_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Relation2d_reflection_ = NULL;
const ::google::protobuf::Descriptor* Relation3d_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Relation3d_reflection_ = NULL;
const ::google::protobuf::Descriptor* Relation2dBetweenTracks_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Relation2dBetweenTracks_reflection_ = NULL;
const ::google::protobuf::Descriptor* Relation3dBetweenTracks_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Relation3dBetweenTracks_reflection_ = NULL;
const ::google::protobuf::Descriptor* View_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  View_reflection_ = NULL;
const ::google::protobuf::Descriptor* Track_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Track_reflection_ = NULL;
const ::google::protobuf::Descriptor* AllRelations_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AllRelations_reflection_ = NULL;
const ::google::protobuf::Descriptor* TrackMap_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TrackMap_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_trackInfo_2eproto() {
  protobuf_AddDesc_trackInfo_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "trackInfo.proto");
  GOOGLE_CHECK(file != NULL);
  Relation2d_descriptor_ = file->message_type(0);
  static const int Relation2d_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Relation2d, xdiff_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Relation2d, ydiff_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Relation2d, anglediff_),
  };
  Relation2d_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Relation2d_descriptor_,
      Relation2d::default_instance_,
      Relation2d_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Relation2d, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Relation2d, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Relation2d));
  Relation3d_descriptor_ = file->message_type(1);
  static const int Relation3d_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Relation3d, xdiff_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Relation3d, ydiff_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Relation3d, zdiff_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Relation3d, yaw_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Relation3d, pitch_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Relation3d, roll_),
  };
  Relation3d_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Relation3d_descriptor_,
      Relation3d::default_instance_,
      Relation3d_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Relation3d, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Relation3d, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Relation3d));
  Relation2dBetweenTracks_descriptor_ = file->message_type(2);
  static const int Relation2dBetweenTracks_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Relation2dBetweenTracks, track1id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Relation2dBetweenTracks, track2id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Relation2dBetweenTracks, view1id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Relation2dBetweenTracks, view2id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Relation2dBetweenTracks, xdiff_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Relation2dBetweenTracks, ydiff_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Relation2dBetweenTracks, anglediff_),
  };
  Relation2dBetweenTracks_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Relation2dBetweenTracks_descriptor_,
      Relation2dBetweenTracks::default_instance_,
      Relation2dBetweenTracks_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Relation2dBetweenTracks, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Relation2dBetweenTracks, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Relation2dBetweenTracks));
  Relation3dBetweenTracks_descriptor_ = file->message_type(3);
  static const int Relation3dBetweenTracks_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Relation3dBetweenTracks, track1id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Relation3dBetweenTracks, track2id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Relation3dBetweenTracks, view1id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Relation3dBetweenTracks, view2id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Relation3dBetweenTracks, xdiff_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Relation3dBetweenTracks, ydiff_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Relation3dBetweenTracks, zdiff_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Relation3dBetweenTracks, yaw_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Relation3dBetweenTracks, pitch_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Relation3dBetweenTracks, roll_),
  };
  Relation3dBetweenTracks_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Relation3dBetweenTracks_descriptor_,
      Relation3dBetweenTracks::default_instance_,
      Relation3dBetweenTracks_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Relation3dBetweenTracks, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Relation3dBetweenTracks, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Relation3dBetweenTracks));
  View_descriptor_ = file->message_type(4);
  static const int View_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(View, imagedir_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(View, featuredir_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(View, relation2d_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(View, relation3d_),
  };
  View_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      View_descriptor_,
      View::default_instance_,
      View_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(View, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(View, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(View));
  Track_descriptor_ = file->message_type(5);
  static const int Track_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Track, viewnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Track, view_),
  };
  Track_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Track_descriptor_,
      Track::default_instance_,
      Track_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Track, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Track, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Track));
  AllRelations_descriptor_ = file->message_type(6);
  static const int AllRelations_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllRelations, relation2dbetweentracks_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllRelations, relation3dbetweentracks_),
  };
  AllRelations_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AllRelations_descriptor_,
      AllRelations::default_instance_,
      AllRelations_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllRelations, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllRelations, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AllRelations));
  TrackMap_descriptor_ = file->message_type(7);
  static const int TrackMap_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrackMap, track_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrackMap, allrelations_),
  };
  TrackMap_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TrackMap_descriptor_,
      TrackMap::default_instance_,
      TrackMap_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrackMap, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrackMap, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TrackMap));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_trackInfo_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Relation2d_descriptor_, &Relation2d::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Relation3d_descriptor_, &Relation3d::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Relation2dBetweenTracks_descriptor_, &Relation2dBetweenTracks::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Relation3dBetweenTracks_descriptor_, &Relation3dBetweenTracks::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    View_descriptor_, &View::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Track_descriptor_, &Track::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AllRelations_descriptor_, &AllRelations::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TrackMap_descriptor_, &TrackMap::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_trackInfo_2eproto() {
  delete Relation2d::default_instance_;
  delete Relation2d_reflection_;
  delete Relation3d::default_instance_;
  delete Relation3d_reflection_;
  delete Relation2dBetweenTracks::default_instance_;
  delete Relation2dBetweenTracks_reflection_;
  delete Relation3dBetweenTracks::default_instance_;
  delete Relation3dBetweenTracks_reflection_;
  delete View::default_instance_;
  delete View_reflection_;
  delete Track::default_instance_;
  delete Track_reflection_;
  delete AllRelations::default_instance_;
  delete AllRelations_reflection_;
  delete TrackMap::default_instance_;
  delete TrackMap_reflection_;
}

void protobuf_AddDesc_trackInfo_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\017trackInfo.proto\022\tblindfind\"F\n\nRelation"
    "2d\022\020\n\005xDiff\030\001 \002(\001:\0010\022\020\n\005yDiff\030\002 \002(\001:\0010\022\024"
    "\n\tangleDiff\030\003 \002(\001:\0010\"u\n\nRelation3d\022\020\n\005xD"
    "iff\030\001 \002(\001:\0010\022\020\n\005yDiff\030\002 \002(\001:\0010\022\020\n\005zDiff\030"
    "\003 \002(\001:\0010\022\016\n\003yaw\030\004 \002(\001:\0010\022\020\n\005pitch\030\005 \002(\001:"
    "\0010\022\017\n\004roll\030\006 \002(\001:\0010\"\245\001\n\027Relation2dBetwee"
    "nTracks\022\023\n\010track1Id\030\001 \002(\005:\0010\022\023\n\010track2Id"
    "\030\002 \002(\005:\0010\022\022\n\007view1Id\030\003 \002(\005:\0010\022\022\n\007view2Id"
    "\030\004 \002(\005:\0010\022\020\n\005xDiff\030\005 \002(\001:\0010\022\020\n\005yDiff\030\006 \002"
    "(\001:\0010\022\024\n\tangleDiff\030\007 \002(\001:\0010\"\324\001\n\027Relation"
    "3dBetweenTracks\022\023\n\010track1Id\030\001 \002(\005:\0010\022\023\n\010"
    "track2Id\030\002 \002(\005:\0010\022\022\n\007view1Id\030\003 \002(\005:\0010\022\022\n"
    "\007view2Id\030\004 \002(\005:\0010\022\020\n\005xDiff\030\005 \002(\001:\0010\022\020\n\005y"
    "Diff\030\006 \002(\001:\0010\022\020\n\005zDiff\030\007 \002(\001:\0010\022\016\n\003yaw\030\010"
    " \002(\001:\0010\022\020\n\005pitch\030\t \002(\001:\0010\022\017\n\004roll\030\n \002(\001:"
    "\0010\"\202\001\n\004View\022\020\n\010imageDir\030\001 \001(\t\022\022\n\nfeature"
    "Dir\030\002 \001(\t\022)\n\nrelation2d\030\003 \001(\0132\025.blindfin"
    "d.Relation2d\022)\n\nrelation3d\030\004 \001(\0132\025.blind"
    "find.Relation3d\":\n\005Track\022\022\n\007viewNum\030\001 \002("
    "\005:\0010\022\035\n\004view\030\002 \003(\0132\017.blindfind.View\"\230\001\n\014"
    "AllRelations\022C\n\027relation2dBetweenTracks\030"
    "\001 \003(\0132\".blindfind.Relation2dBetweenTrack"
    "s\022C\n\027relation3dBetweenTracks\030\002 \003(\0132\".bli"
    "ndfind.Relation3dBetweenTracks\"Z\n\010TrackM"
    "ap\022\037\n\005track\030\001 \003(\0132\020.blindfind.Track\022-\n\014a"
    "llRelations\030\002 \002(\0132\027.blindfind.AllRelatio"
    "ns", 1042);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "trackInfo.proto", &protobuf_RegisterTypes);
  Relation2d::default_instance_ = new Relation2d();
  Relation3d::default_instance_ = new Relation3d();
  Relation2dBetweenTracks::default_instance_ = new Relation2dBetweenTracks();
  Relation3dBetweenTracks::default_instance_ = new Relation3dBetweenTracks();
  View::default_instance_ = new View();
  Track::default_instance_ = new Track();
  AllRelations::default_instance_ = new AllRelations();
  TrackMap::default_instance_ = new TrackMap();
  Relation2d::default_instance_->InitAsDefaultInstance();
  Relation3d::default_instance_->InitAsDefaultInstance();
  Relation2dBetweenTracks::default_instance_->InitAsDefaultInstance();
  Relation3dBetweenTracks::default_instance_->InitAsDefaultInstance();
  View::default_instance_->InitAsDefaultInstance();
  Track::default_instance_->InitAsDefaultInstance();
  AllRelations::default_instance_->InitAsDefaultInstance();
  TrackMap::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_trackInfo_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_trackInfo_2eproto {
  StaticDescriptorInitializer_trackInfo_2eproto() {
    protobuf_AddDesc_trackInfo_2eproto();
  }
} static_descriptor_initializer_trackInfo_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int Relation2d::kXDiffFieldNumber;
const int Relation2d::kYDiffFieldNumber;
const int Relation2d::kAngleDiffFieldNumber;
#endif  // !_MSC_VER

Relation2d::Relation2d()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:blindfind.Relation2d)
}

void Relation2d::InitAsDefaultInstance() {
}

Relation2d::Relation2d(const Relation2d& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:blindfind.Relation2d)
}

void Relation2d::SharedCtor() {
  _cached_size_ = 0;
  xdiff_ = 0;
  ydiff_ = 0;
  anglediff_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Relation2d::~Relation2d() {
  // @@protoc_insertion_point(destructor:blindfind.Relation2d)
  SharedDtor();
}

void Relation2d::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Relation2d::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Relation2d::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Relation2d_descriptor_;
}

const Relation2d& Relation2d::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_trackInfo_2eproto();
  return *default_instance_;
}

Relation2d* Relation2d::default_instance_ = NULL;

Relation2d* Relation2d::New() const {
  return new Relation2d;
}

void Relation2d::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<Relation2d*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(xdiff_, anglediff_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Relation2d::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:blindfind.Relation2d)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required double xDiff = 1 [default = 0];
      case 1: {
        if (tag == 9) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &xdiff_)));
          set_has_xdiff();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(17)) goto parse_yDiff;
        break;
      }

      // required double yDiff = 2 [default = 0];
      case 2: {
        if (tag == 17) {
         parse_yDiff:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &ydiff_)));
          set_has_ydiff();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(25)) goto parse_angleDiff;
        break;
      }

      // required double angleDiff = 3 [default = 0];
      case 3: {
        if (tag == 25) {
         parse_angleDiff:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &anglediff_)));
          set_has_anglediff();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:blindfind.Relation2d)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:blindfind.Relation2d)
  return false;
#undef DO_
}

void Relation2d::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:blindfind.Relation2d)
  // required double xDiff = 1 [default = 0];
  if (has_xdiff()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->xdiff(), output);
  }

  // required double yDiff = 2 [default = 0];
  if (has_ydiff()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->ydiff(), output);
  }

  // required double angleDiff = 3 [default = 0];
  if (has_anglediff()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->anglediff(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:blindfind.Relation2d)
}

::google::protobuf::uint8* Relation2d::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:blindfind.Relation2d)
  // required double xDiff = 1 [default = 0];
  if (has_xdiff()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->xdiff(), target);
  }

  // required double yDiff = 2 [default = 0];
  if (has_ydiff()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->ydiff(), target);
  }

  // required double angleDiff = 3 [default = 0];
  if (has_anglediff()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->anglediff(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:blindfind.Relation2d)
  return target;
}

int Relation2d::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required double xDiff = 1 [default = 0];
    if (has_xdiff()) {
      total_size += 1 + 8;
    }

    // required double yDiff = 2 [default = 0];
    if (has_ydiff()) {
      total_size += 1 + 8;
    }

    // required double angleDiff = 3 [default = 0];
    if (has_anglediff()) {
      total_size += 1 + 8;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Relation2d::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Relation2d* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Relation2d*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Relation2d::MergeFrom(const Relation2d& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_xdiff()) {
      set_xdiff(from.xdiff());
    }
    if (from.has_ydiff()) {
      set_ydiff(from.ydiff());
    }
    if (from.has_anglediff()) {
      set_anglediff(from.anglediff());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Relation2d::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Relation2d::CopyFrom(const Relation2d& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Relation2d::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void Relation2d::Swap(Relation2d* other) {
  if (other != this) {
    std::swap(xdiff_, other->xdiff_);
    std::swap(ydiff_, other->ydiff_);
    std::swap(anglediff_, other->anglediff_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Relation2d::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Relation2d_descriptor_;
  metadata.reflection = Relation2d_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Relation3d::kXDiffFieldNumber;
const int Relation3d::kYDiffFieldNumber;
const int Relation3d::kZDiffFieldNumber;
const int Relation3d::kYawFieldNumber;
const int Relation3d::kPitchFieldNumber;
const int Relation3d::kRollFieldNumber;
#endif  // !_MSC_VER

Relation3d::Relation3d()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:blindfind.Relation3d)
}

void Relation3d::InitAsDefaultInstance() {
}

Relation3d::Relation3d(const Relation3d& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:blindfind.Relation3d)
}

void Relation3d::SharedCtor() {
  _cached_size_ = 0;
  xdiff_ = 0;
  ydiff_ = 0;
  zdiff_ = 0;
  yaw_ = 0;
  pitch_ = 0;
  roll_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Relation3d::~Relation3d() {
  // @@protoc_insertion_point(destructor:blindfind.Relation3d)
  SharedDtor();
}

void Relation3d::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Relation3d::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Relation3d::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Relation3d_descriptor_;
}

const Relation3d& Relation3d::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_trackInfo_2eproto();
  return *default_instance_;
}

Relation3d* Relation3d::default_instance_ = NULL;

Relation3d* Relation3d::New() const {
  return new Relation3d;
}

void Relation3d::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<Relation3d*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 63) {
    ZR_(xdiff_, roll_);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Relation3d::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:blindfind.Relation3d)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required double xDiff = 1 [default = 0];
      case 1: {
        if (tag == 9) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &xdiff_)));
          set_has_xdiff();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(17)) goto parse_yDiff;
        break;
      }

      // required double yDiff = 2 [default = 0];
      case 2: {
        if (tag == 17) {
         parse_yDiff:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &ydiff_)));
          set_has_ydiff();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(25)) goto parse_zDiff;
        break;
      }

      // required double zDiff = 3 [default = 0];
      case 3: {
        if (tag == 25) {
         parse_zDiff:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &zdiff_)));
          set_has_zdiff();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(33)) goto parse_yaw;
        break;
      }

      // required double yaw = 4 [default = 0];
      case 4: {
        if (tag == 33) {
         parse_yaw:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &yaw_)));
          set_has_yaw();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(41)) goto parse_pitch;
        break;
      }

      // required double pitch = 5 [default = 0];
      case 5: {
        if (tag == 41) {
         parse_pitch:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &pitch_)));
          set_has_pitch();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(49)) goto parse_roll;
        break;
      }

      // required double roll = 6 [default = 0];
      case 6: {
        if (tag == 49) {
         parse_roll:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &roll_)));
          set_has_roll();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:blindfind.Relation3d)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:blindfind.Relation3d)
  return false;
#undef DO_
}

void Relation3d::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:blindfind.Relation3d)
  // required double xDiff = 1 [default = 0];
  if (has_xdiff()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->xdiff(), output);
  }

  // required double yDiff = 2 [default = 0];
  if (has_ydiff()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->ydiff(), output);
  }

  // required double zDiff = 3 [default = 0];
  if (has_zdiff()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->zdiff(), output);
  }

  // required double yaw = 4 [default = 0];
  if (has_yaw()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->yaw(), output);
  }

  // required double pitch = 5 [default = 0];
  if (has_pitch()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->pitch(), output);
  }

  // required double roll = 6 [default = 0];
  if (has_roll()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->roll(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:blindfind.Relation3d)
}

::google::protobuf::uint8* Relation3d::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:blindfind.Relation3d)
  // required double xDiff = 1 [default = 0];
  if (has_xdiff()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->xdiff(), target);
  }

  // required double yDiff = 2 [default = 0];
  if (has_ydiff()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->ydiff(), target);
  }

  // required double zDiff = 3 [default = 0];
  if (has_zdiff()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->zdiff(), target);
  }

  // required double yaw = 4 [default = 0];
  if (has_yaw()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->yaw(), target);
  }

  // required double pitch = 5 [default = 0];
  if (has_pitch()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->pitch(), target);
  }

  // required double roll = 6 [default = 0];
  if (has_roll()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->roll(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:blindfind.Relation3d)
  return target;
}

int Relation3d::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required double xDiff = 1 [default = 0];
    if (has_xdiff()) {
      total_size += 1 + 8;
    }

    // required double yDiff = 2 [default = 0];
    if (has_ydiff()) {
      total_size += 1 + 8;
    }

    // required double zDiff = 3 [default = 0];
    if (has_zdiff()) {
      total_size += 1 + 8;
    }

    // required double yaw = 4 [default = 0];
    if (has_yaw()) {
      total_size += 1 + 8;
    }

    // required double pitch = 5 [default = 0];
    if (has_pitch()) {
      total_size += 1 + 8;
    }

    // required double roll = 6 [default = 0];
    if (has_roll()) {
      total_size += 1 + 8;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Relation3d::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Relation3d* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Relation3d*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Relation3d::MergeFrom(const Relation3d& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_xdiff()) {
      set_xdiff(from.xdiff());
    }
    if (from.has_ydiff()) {
      set_ydiff(from.ydiff());
    }
    if (from.has_zdiff()) {
      set_zdiff(from.zdiff());
    }
    if (from.has_yaw()) {
      set_yaw(from.yaw());
    }
    if (from.has_pitch()) {
      set_pitch(from.pitch());
    }
    if (from.has_roll()) {
      set_roll(from.roll());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Relation3d::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Relation3d::CopyFrom(const Relation3d& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Relation3d::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000003f) != 0x0000003f) return false;

  return true;
}

void Relation3d::Swap(Relation3d* other) {
  if (other != this) {
    std::swap(xdiff_, other->xdiff_);
    std::swap(ydiff_, other->ydiff_);
    std::swap(zdiff_, other->zdiff_);
    std::swap(yaw_, other->yaw_);
    std::swap(pitch_, other->pitch_);
    std::swap(roll_, other->roll_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Relation3d::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Relation3d_descriptor_;
  metadata.reflection = Relation3d_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Relation2dBetweenTracks::kTrack1IdFieldNumber;
const int Relation2dBetweenTracks::kTrack2IdFieldNumber;
const int Relation2dBetweenTracks::kView1IdFieldNumber;
const int Relation2dBetweenTracks::kView2IdFieldNumber;
const int Relation2dBetweenTracks::kXDiffFieldNumber;
const int Relation2dBetweenTracks::kYDiffFieldNumber;
const int Relation2dBetweenTracks::kAngleDiffFieldNumber;
#endif  // !_MSC_VER

Relation2dBetweenTracks::Relation2dBetweenTracks()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:blindfind.Relation2dBetweenTracks)
}

void Relation2dBetweenTracks::InitAsDefaultInstance() {
}

Relation2dBetweenTracks::Relation2dBetweenTracks(const Relation2dBetweenTracks& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:blindfind.Relation2dBetweenTracks)
}

void Relation2dBetweenTracks::SharedCtor() {
  _cached_size_ = 0;
  track1id_ = 0;
  track2id_ = 0;
  view1id_ = 0;
  view2id_ = 0;
  xdiff_ = 0;
  ydiff_ = 0;
  anglediff_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Relation2dBetweenTracks::~Relation2dBetweenTracks() {
  // @@protoc_insertion_point(destructor:blindfind.Relation2dBetweenTracks)
  SharedDtor();
}

void Relation2dBetweenTracks::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Relation2dBetweenTracks::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Relation2dBetweenTracks::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Relation2dBetweenTracks_descriptor_;
}

const Relation2dBetweenTracks& Relation2dBetweenTracks::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_trackInfo_2eproto();
  return *default_instance_;
}

Relation2dBetweenTracks* Relation2dBetweenTracks::default_instance_ = NULL;

Relation2dBetweenTracks* Relation2dBetweenTracks::New() const {
  return new Relation2dBetweenTracks;
}

void Relation2dBetweenTracks::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<Relation2dBetweenTracks*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 127) {
    ZR_(track1id_, anglediff_);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Relation2dBetweenTracks::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:blindfind.Relation2dBetweenTracks)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 track1Id = 1 [default = 0];
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &track1id_)));
          set_has_track1id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_track2Id;
        break;
      }

      // required int32 track2Id = 2 [default = 0];
      case 2: {
        if (tag == 16) {
         parse_track2Id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &track2id_)));
          set_has_track2id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_view1Id;
        break;
      }

      // required int32 view1Id = 3 [default = 0];
      case 3: {
        if (tag == 24) {
         parse_view1Id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &view1id_)));
          set_has_view1id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_view2Id;
        break;
      }

      // required int32 view2Id = 4 [default = 0];
      case 4: {
        if (tag == 32) {
         parse_view2Id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &view2id_)));
          set_has_view2id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(41)) goto parse_xDiff;
        break;
      }

      // required double xDiff = 5 [default = 0];
      case 5: {
        if (tag == 41) {
         parse_xDiff:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &xdiff_)));
          set_has_xdiff();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(49)) goto parse_yDiff;
        break;
      }

      // required double yDiff = 6 [default = 0];
      case 6: {
        if (tag == 49) {
         parse_yDiff:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &ydiff_)));
          set_has_ydiff();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(57)) goto parse_angleDiff;
        break;
      }

      // required double angleDiff = 7 [default = 0];
      case 7: {
        if (tag == 57) {
         parse_angleDiff:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &anglediff_)));
          set_has_anglediff();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:blindfind.Relation2dBetweenTracks)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:blindfind.Relation2dBetweenTracks)
  return false;
#undef DO_
}

void Relation2dBetweenTracks::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:blindfind.Relation2dBetweenTracks)
  // required int32 track1Id = 1 [default = 0];
  if (has_track1id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->track1id(), output);
  }

  // required int32 track2Id = 2 [default = 0];
  if (has_track2id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->track2id(), output);
  }

  // required int32 view1Id = 3 [default = 0];
  if (has_view1id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->view1id(), output);
  }

  // required int32 view2Id = 4 [default = 0];
  if (has_view2id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->view2id(), output);
  }

  // required double xDiff = 5 [default = 0];
  if (has_xdiff()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->xdiff(), output);
  }

  // required double yDiff = 6 [default = 0];
  if (has_ydiff()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->ydiff(), output);
  }

  // required double angleDiff = 7 [default = 0];
  if (has_anglediff()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(7, this->anglediff(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:blindfind.Relation2dBetweenTracks)
}

::google::protobuf::uint8* Relation2dBetweenTracks::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:blindfind.Relation2dBetweenTracks)
  // required int32 track1Id = 1 [default = 0];
  if (has_track1id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->track1id(), target);
  }

  // required int32 track2Id = 2 [default = 0];
  if (has_track2id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->track2id(), target);
  }

  // required int32 view1Id = 3 [default = 0];
  if (has_view1id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->view1id(), target);
  }

  // required int32 view2Id = 4 [default = 0];
  if (has_view2id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->view2id(), target);
  }

  // required double xDiff = 5 [default = 0];
  if (has_xdiff()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->xdiff(), target);
  }

  // required double yDiff = 6 [default = 0];
  if (has_ydiff()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->ydiff(), target);
  }

  // required double angleDiff = 7 [default = 0];
  if (has_anglediff()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(7, this->anglediff(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:blindfind.Relation2dBetweenTracks)
  return target;
}

int Relation2dBetweenTracks::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 track1Id = 1 [default = 0];
    if (has_track1id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->track1id());
    }

    // required int32 track2Id = 2 [default = 0];
    if (has_track2id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->track2id());
    }

    // required int32 view1Id = 3 [default = 0];
    if (has_view1id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->view1id());
    }

    // required int32 view2Id = 4 [default = 0];
    if (has_view2id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->view2id());
    }

    // required double xDiff = 5 [default = 0];
    if (has_xdiff()) {
      total_size += 1 + 8;
    }

    // required double yDiff = 6 [default = 0];
    if (has_ydiff()) {
      total_size += 1 + 8;
    }

    // required double angleDiff = 7 [default = 0];
    if (has_anglediff()) {
      total_size += 1 + 8;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Relation2dBetweenTracks::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Relation2dBetweenTracks* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Relation2dBetweenTracks*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Relation2dBetweenTracks::MergeFrom(const Relation2dBetweenTracks& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_track1id()) {
      set_track1id(from.track1id());
    }
    if (from.has_track2id()) {
      set_track2id(from.track2id());
    }
    if (from.has_view1id()) {
      set_view1id(from.view1id());
    }
    if (from.has_view2id()) {
      set_view2id(from.view2id());
    }
    if (from.has_xdiff()) {
      set_xdiff(from.xdiff());
    }
    if (from.has_ydiff()) {
      set_ydiff(from.ydiff());
    }
    if (from.has_anglediff()) {
      set_anglediff(from.anglediff());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Relation2dBetweenTracks::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Relation2dBetweenTracks::CopyFrom(const Relation2dBetweenTracks& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Relation2dBetweenTracks::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000007f) != 0x0000007f) return false;

  return true;
}

void Relation2dBetweenTracks::Swap(Relation2dBetweenTracks* other) {
  if (other != this) {
    std::swap(track1id_, other->track1id_);
    std::swap(track2id_, other->track2id_);
    std::swap(view1id_, other->view1id_);
    std::swap(view2id_, other->view2id_);
    std::swap(xdiff_, other->xdiff_);
    std::swap(ydiff_, other->ydiff_);
    std::swap(anglediff_, other->anglediff_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Relation2dBetweenTracks::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Relation2dBetweenTracks_descriptor_;
  metadata.reflection = Relation2dBetweenTracks_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Relation3dBetweenTracks::kTrack1IdFieldNumber;
const int Relation3dBetweenTracks::kTrack2IdFieldNumber;
const int Relation3dBetweenTracks::kView1IdFieldNumber;
const int Relation3dBetweenTracks::kView2IdFieldNumber;
const int Relation3dBetweenTracks::kXDiffFieldNumber;
const int Relation3dBetweenTracks::kYDiffFieldNumber;
const int Relation3dBetweenTracks::kZDiffFieldNumber;
const int Relation3dBetweenTracks::kYawFieldNumber;
const int Relation3dBetweenTracks::kPitchFieldNumber;
const int Relation3dBetweenTracks::kRollFieldNumber;
#endif  // !_MSC_VER

Relation3dBetweenTracks::Relation3dBetweenTracks()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:blindfind.Relation3dBetweenTracks)
}

void Relation3dBetweenTracks::InitAsDefaultInstance() {
}

Relation3dBetweenTracks::Relation3dBetweenTracks(const Relation3dBetweenTracks& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:blindfind.Relation3dBetweenTracks)
}

void Relation3dBetweenTracks::SharedCtor() {
  _cached_size_ = 0;
  track1id_ = 0;
  track2id_ = 0;
  view1id_ = 0;
  view2id_ = 0;
  xdiff_ = 0;
  ydiff_ = 0;
  zdiff_ = 0;
  yaw_ = 0;
  pitch_ = 0;
  roll_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Relation3dBetweenTracks::~Relation3dBetweenTracks() {
  // @@protoc_insertion_point(destructor:blindfind.Relation3dBetweenTracks)
  SharedDtor();
}

void Relation3dBetweenTracks::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Relation3dBetweenTracks::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Relation3dBetweenTracks::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Relation3dBetweenTracks_descriptor_;
}

const Relation3dBetweenTracks& Relation3dBetweenTracks::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_trackInfo_2eproto();
  return *default_instance_;
}

Relation3dBetweenTracks* Relation3dBetweenTracks::default_instance_ = NULL;

Relation3dBetweenTracks* Relation3dBetweenTracks::New() const {
  return new Relation3dBetweenTracks;
}

void Relation3dBetweenTracks::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<Relation3dBetweenTracks*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(track1id_, yaw_);
  }
  ZR_(pitch_, roll_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Relation3dBetweenTracks::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:blindfind.Relation3dBetweenTracks)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 track1Id = 1 [default = 0];
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &track1id_)));
          set_has_track1id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_track2Id;
        break;
      }

      // required int32 track2Id = 2 [default = 0];
      case 2: {
        if (tag == 16) {
         parse_track2Id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &track2id_)));
          set_has_track2id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_view1Id;
        break;
      }

      // required int32 view1Id = 3 [default = 0];
      case 3: {
        if (tag == 24) {
         parse_view1Id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &view1id_)));
          set_has_view1id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_view2Id;
        break;
      }

      // required int32 view2Id = 4 [default = 0];
      case 4: {
        if (tag == 32) {
         parse_view2Id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &view2id_)));
          set_has_view2id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(41)) goto parse_xDiff;
        break;
      }

      // required double xDiff = 5 [default = 0];
      case 5: {
        if (tag == 41) {
         parse_xDiff:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &xdiff_)));
          set_has_xdiff();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(49)) goto parse_yDiff;
        break;
      }

      // required double yDiff = 6 [default = 0];
      case 6: {
        if (tag == 49) {
         parse_yDiff:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &ydiff_)));
          set_has_ydiff();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(57)) goto parse_zDiff;
        break;
      }

      // required double zDiff = 7 [default = 0];
      case 7: {
        if (tag == 57) {
         parse_zDiff:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &zdiff_)));
          set_has_zdiff();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(65)) goto parse_yaw;
        break;
      }

      // required double yaw = 8 [default = 0];
      case 8: {
        if (tag == 65) {
         parse_yaw:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &yaw_)));
          set_has_yaw();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(73)) goto parse_pitch;
        break;
      }

      // required double pitch = 9 [default = 0];
      case 9: {
        if (tag == 73) {
         parse_pitch:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &pitch_)));
          set_has_pitch();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(81)) goto parse_roll;
        break;
      }

      // required double roll = 10 [default = 0];
      case 10: {
        if (tag == 81) {
         parse_roll:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &roll_)));
          set_has_roll();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:blindfind.Relation3dBetweenTracks)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:blindfind.Relation3dBetweenTracks)
  return false;
#undef DO_
}

void Relation3dBetweenTracks::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:blindfind.Relation3dBetweenTracks)
  // required int32 track1Id = 1 [default = 0];
  if (has_track1id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->track1id(), output);
  }

  // required int32 track2Id = 2 [default = 0];
  if (has_track2id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->track2id(), output);
  }

  // required int32 view1Id = 3 [default = 0];
  if (has_view1id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->view1id(), output);
  }

  // required int32 view2Id = 4 [default = 0];
  if (has_view2id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->view2id(), output);
  }

  // required double xDiff = 5 [default = 0];
  if (has_xdiff()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->xdiff(), output);
  }

  // required double yDiff = 6 [default = 0];
  if (has_ydiff()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->ydiff(), output);
  }

  // required double zDiff = 7 [default = 0];
  if (has_zdiff()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(7, this->zdiff(), output);
  }

  // required double yaw = 8 [default = 0];
  if (has_yaw()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(8, this->yaw(), output);
  }

  // required double pitch = 9 [default = 0];
  if (has_pitch()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(9, this->pitch(), output);
  }

  // required double roll = 10 [default = 0];
  if (has_roll()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(10, this->roll(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:blindfind.Relation3dBetweenTracks)
}

::google::protobuf::uint8* Relation3dBetweenTracks::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:blindfind.Relation3dBetweenTracks)
  // required int32 track1Id = 1 [default = 0];
  if (has_track1id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->track1id(), target);
  }

  // required int32 track2Id = 2 [default = 0];
  if (has_track2id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->track2id(), target);
  }

  // required int32 view1Id = 3 [default = 0];
  if (has_view1id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->view1id(), target);
  }

  // required int32 view2Id = 4 [default = 0];
  if (has_view2id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->view2id(), target);
  }

  // required double xDiff = 5 [default = 0];
  if (has_xdiff()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->xdiff(), target);
  }

  // required double yDiff = 6 [default = 0];
  if (has_ydiff()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->ydiff(), target);
  }

  // required double zDiff = 7 [default = 0];
  if (has_zdiff()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(7, this->zdiff(), target);
  }

  // required double yaw = 8 [default = 0];
  if (has_yaw()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(8, this->yaw(), target);
  }

  // required double pitch = 9 [default = 0];
  if (has_pitch()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(9, this->pitch(), target);
  }

  // required double roll = 10 [default = 0];
  if (has_roll()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(10, this->roll(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:blindfind.Relation3dBetweenTracks)
  return target;
}

int Relation3dBetweenTracks::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 track1Id = 1 [default = 0];
    if (has_track1id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->track1id());
    }

    // required int32 track2Id = 2 [default = 0];
    if (has_track2id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->track2id());
    }

    // required int32 view1Id = 3 [default = 0];
    if (has_view1id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->view1id());
    }

    // required int32 view2Id = 4 [default = 0];
    if (has_view2id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->view2id());
    }

    // required double xDiff = 5 [default = 0];
    if (has_xdiff()) {
      total_size += 1 + 8;
    }

    // required double yDiff = 6 [default = 0];
    if (has_ydiff()) {
      total_size += 1 + 8;
    }

    // required double zDiff = 7 [default = 0];
    if (has_zdiff()) {
      total_size += 1 + 8;
    }

    // required double yaw = 8 [default = 0];
    if (has_yaw()) {
      total_size += 1 + 8;
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required double pitch = 9 [default = 0];
    if (has_pitch()) {
      total_size += 1 + 8;
    }

    // required double roll = 10 [default = 0];
    if (has_roll()) {
      total_size += 1 + 8;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Relation3dBetweenTracks::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Relation3dBetweenTracks* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Relation3dBetweenTracks*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Relation3dBetweenTracks::MergeFrom(const Relation3dBetweenTracks& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_track1id()) {
      set_track1id(from.track1id());
    }
    if (from.has_track2id()) {
      set_track2id(from.track2id());
    }
    if (from.has_view1id()) {
      set_view1id(from.view1id());
    }
    if (from.has_view2id()) {
      set_view2id(from.view2id());
    }
    if (from.has_xdiff()) {
      set_xdiff(from.xdiff());
    }
    if (from.has_ydiff()) {
      set_ydiff(from.ydiff());
    }
    if (from.has_zdiff()) {
      set_zdiff(from.zdiff());
    }
    if (from.has_yaw()) {
      set_yaw(from.yaw());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_pitch()) {
      set_pitch(from.pitch());
    }
    if (from.has_roll()) {
      set_roll(from.roll());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Relation3dBetweenTracks::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Relation3dBetweenTracks::CopyFrom(const Relation3dBetweenTracks& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Relation3dBetweenTracks::IsInitialized() const {
  if ((_has_bits_[0] & 0x000003ff) != 0x000003ff) return false;

  return true;
}

void Relation3dBetweenTracks::Swap(Relation3dBetweenTracks* other) {
  if (other != this) {
    std::swap(track1id_, other->track1id_);
    std::swap(track2id_, other->track2id_);
    std::swap(view1id_, other->view1id_);
    std::swap(view2id_, other->view2id_);
    std::swap(xdiff_, other->xdiff_);
    std::swap(ydiff_, other->ydiff_);
    std::swap(zdiff_, other->zdiff_);
    std::swap(yaw_, other->yaw_);
    std::swap(pitch_, other->pitch_);
    std::swap(roll_, other->roll_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Relation3dBetweenTracks::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Relation3dBetweenTracks_descriptor_;
  metadata.reflection = Relation3dBetweenTracks_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int View::kImageDirFieldNumber;
const int View::kFeatureDirFieldNumber;
const int View::kRelation2DFieldNumber;
const int View::kRelation3DFieldNumber;
#endif  // !_MSC_VER

View::View()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:blindfind.View)
}

void View::InitAsDefaultInstance() {
  relation2d_ = const_cast< ::blindfind::Relation2d*>(&::blindfind::Relation2d::default_instance());
  relation3d_ = const_cast< ::blindfind::Relation3d*>(&::blindfind::Relation3d::default_instance());
}

View::View(const View& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:blindfind.View)
}

void View::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  imagedir_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  featuredir_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  relation2d_ = NULL;
  relation3d_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

View::~View() {
  // @@protoc_insertion_point(destructor:blindfind.View)
  SharedDtor();
}

void View::SharedDtor() {
  if (imagedir_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete imagedir_;
  }
  if (featuredir_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete featuredir_;
  }
  if (this != default_instance_) {
    delete relation2d_;
    delete relation3d_;
  }
}

void View::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* View::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return View_descriptor_;
}

const View& View::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_trackInfo_2eproto();
  return *default_instance_;
}

View* View::default_instance_ = NULL;

View* View::New() const {
  return new View;
}

void View::Clear() {
  if (_has_bits_[0 / 32] & 15) {
    if (has_imagedir()) {
      if (imagedir_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        imagedir_->clear();
      }
    }
    if (has_featuredir()) {
      if (featuredir_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        featuredir_->clear();
      }
    }
    if (has_relation2d()) {
      if (relation2d_ != NULL) relation2d_->::blindfind::Relation2d::Clear();
    }
    if (has_relation3d()) {
      if (relation3d_ != NULL) relation3d_->::blindfind::Relation3d::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool View::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:blindfind.View)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string imageDir = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_imagedir()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->imagedir().data(), this->imagedir().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "imagedir");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_featureDir;
        break;
      }

      // optional string featureDir = 2;
      case 2: {
        if (tag == 18) {
         parse_featureDir:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_featuredir()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->featuredir().data(), this->featuredir().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "featuredir");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_relation2d;
        break;
      }

      // optional .blindfind.Relation2d relation2d = 3;
      case 3: {
        if (tag == 26) {
         parse_relation2d:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_relation2d()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_relation3d;
        break;
      }

      // optional .blindfind.Relation3d relation3d = 4;
      case 4: {
        if (tag == 34) {
         parse_relation3d:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_relation3d()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:blindfind.View)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:blindfind.View)
  return false;
#undef DO_
}

void View::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:blindfind.View)
  // optional string imageDir = 1;
  if (has_imagedir()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->imagedir().data(), this->imagedir().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "imagedir");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->imagedir(), output);
  }

  // optional string featureDir = 2;
  if (has_featuredir()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->featuredir().data(), this->featuredir().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "featuredir");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->featuredir(), output);
  }

  // optional .blindfind.Relation2d relation2d = 3;
  if (has_relation2d()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->relation2d(), output);
  }

  // optional .blindfind.Relation3d relation3d = 4;
  if (has_relation3d()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->relation3d(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:blindfind.View)
}

::google::protobuf::uint8* View::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:blindfind.View)
  // optional string imageDir = 1;
  if (has_imagedir()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->imagedir().data(), this->imagedir().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "imagedir");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->imagedir(), target);
  }

  // optional string featureDir = 2;
  if (has_featuredir()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->featuredir().data(), this->featuredir().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "featuredir");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->featuredir(), target);
  }

  // optional .blindfind.Relation2d relation2d = 3;
  if (has_relation2d()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->relation2d(), target);
  }

  // optional .blindfind.Relation3d relation3d = 4;
  if (has_relation3d()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->relation3d(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:blindfind.View)
  return target;
}

int View::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string imageDir = 1;
    if (has_imagedir()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->imagedir());
    }

    // optional string featureDir = 2;
    if (has_featuredir()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->featuredir());
    }

    // optional .blindfind.Relation2d relation2d = 3;
    if (has_relation2d()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->relation2d());
    }

    // optional .blindfind.Relation3d relation3d = 4;
    if (has_relation3d()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->relation3d());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void View::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const View* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const View*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void View::MergeFrom(const View& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_imagedir()) {
      set_imagedir(from.imagedir());
    }
    if (from.has_featuredir()) {
      set_featuredir(from.featuredir());
    }
    if (from.has_relation2d()) {
      mutable_relation2d()->::blindfind::Relation2d::MergeFrom(from.relation2d());
    }
    if (from.has_relation3d()) {
      mutable_relation3d()->::blindfind::Relation3d::MergeFrom(from.relation3d());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void View::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void View::CopyFrom(const View& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool View::IsInitialized() const {

  if (has_relation2d()) {
    if (!this->relation2d().IsInitialized()) return false;
  }
  if (has_relation3d()) {
    if (!this->relation3d().IsInitialized()) return false;
  }
  return true;
}

void View::Swap(View* other) {
  if (other != this) {
    std::swap(imagedir_, other->imagedir_);
    std::swap(featuredir_, other->featuredir_);
    std::swap(relation2d_, other->relation2d_);
    std::swap(relation3d_, other->relation3d_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata View::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = View_descriptor_;
  metadata.reflection = View_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Track::kViewNumFieldNumber;
const int Track::kViewFieldNumber;
#endif  // !_MSC_VER

Track::Track()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:blindfind.Track)
}

void Track::InitAsDefaultInstance() {
}

Track::Track(const Track& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:blindfind.Track)
}

void Track::SharedCtor() {
  _cached_size_ = 0;
  viewnum_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Track::~Track() {
  // @@protoc_insertion_point(destructor:blindfind.Track)
  SharedDtor();
}

void Track::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Track::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Track::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Track_descriptor_;
}

const Track& Track::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_trackInfo_2eproto();
  return *default_instance_;
}

Track* Track::default_instance_ = NULL;

Track* Track::New() const {
  return new Track;
}

void Track::Clear() {
  viewnum_ = 0;
  view_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Track::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:blindfind.Track)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 viewNum = 1 [default = 0];
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &viewnum_)));
          set_has_viewnum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_view;
        break;
      }

      // repeated .blindfind.View view = 2;
      case 2: {
        if (tag == 18) {
         parse_view:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_view()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_view;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:blindfind.Track)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:blindfind.Track)
  return false;
#undef DO_
}

void Track::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:blindfind.Track)
  // required int32 viewNum = 1 [default = 0];
  if (has_viewnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->viewnum(), output);
  }

  // repeated .blindfind.View view = 2;
  for (int i = 0; i < this->view_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->view(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:blindfind.Track)
}

::google::protobuf::uint8* Track::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:blindfind.Track)
  // required int32 viewNum = 1 [default = 0];
  if (has_viewnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->viewnum(), target);
  }

  // repeated .blindfind.View view = 2;
  for (int i = 0; i < this->view_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->view(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:blindfind.Track)
  return target;
}

int Track::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 viewNum = 1 [default = 0];
    if (has_viewnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->viewnum());
    }

  }
  // repeated .blindfind.View view = 2;
  total_size += 1 * this->view_size();
  for (int i = 0; i < this->view_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->view(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Track::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Track* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Track*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Track::MergeFrom(const Track& from) {
  GOOGLE_CHECK_NE(&from, this);
  view_.MergeFrom(from.view_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_viewnum()) {
      set_viewnum(from.viewnum());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Track::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Track::CopyFrom(const Track& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Track::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->view())) return false;
  return true;
}

void Track::Swap(Track* other) {
  if (other != this) {
    std::swap(viewnum_, other->viewnum_);
    view_.Swap(&other->view_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Track::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Track_descriptor_;
  metadata.reflection = Track_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AllRelations::kRelation2DBetweenTracksFieldNumber;
const int AllRelations::kRelation3DBetweenTracksFieldNumber;
#endif  // !_MSC_VER

AllRelations::AllRelations()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:blindfind.AllRelations)
}

void AllRelations::InitAsDefaultInstance() {
}

AllRelations::AllRelations(const AllRelations& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:blindfind.AllRelations)
}

void AllRelations::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AllRelations::~AllRelations() {
  // @@protoc_insertion_point(destructor:blindfind.AllRelations)
  SharedDtor();
}

void AllRelations::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AllRelations::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AllRelations::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AllRelations_descriptor_;
}

const AllRelations& AllRelations::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_trackInfo_2eproto();
  return *default_instance_;
}

AllRelations* AllRelations::default_instance_ = NULL;

AllRelations* AllRelations::New() const {
  return new AllRelations;
}

void AllRelations::Clear() {
  relation2dbetweentracks_.Clear();
  relation3dbetweentracks_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AllRelations::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:blindfind.AllRelations)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .blindfind.Relation2dBetweenTracks relation2dBetweenTracks = 1;
      case 1: {
        if (tag == 10) {
         parse_relation2dBetweenTracks:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_relation2dbetweentracks()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_relation2dBetweenTracks;
        if (input->ExpectTag(18)) goto parse_relation3dBetweenTracks;
        break;
      }

      // repeated .blindfind.Relation3dBetweenTracks relation3dBetweenTracks = 2;
      case 2: {
        if (tag == 18) {
         parse_relation3dBetweenTracks:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_relation3dbetweentracks()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_relation3dBetweenTracks;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:blindfind.AllRelations)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:blindfind.AllRelations)
  return false;
#undef DO_
}

void AllRelations::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:blindfind.AllRelations)
  // repeated .blindfind.Relation2dBetweenTracks relation2dBetweenTracks = 1;
  for (int i = 0; i < this->relation2dbetweentracks_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->relation2dbetweentracks(i), output);
  }

  // repeated .blindfind.Relation3dBetweenTracks relation3dBetweenTracks = 2;
  for (int i = 0; i < this->relation3dbetweentracks_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->relation3dbetweentracks(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:blindfind.AllRelations)
}

::google::protobuf::uint8* AllRelations::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:blindfind.AllRelations)
  // repeated .blindfind.Relation2dBetweenTracks relation2dBetweenTracks = 1;
  for (int i = 0; i < this->relation2dbetweentracks_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->relation2dbetweentracks(i), target);
  }

  // repeated .blindfind.Relation3dBetweenTracks relation3dBetweenTracks = 2;
  for (int i = 0; i < this->relation3dbetweentracks_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->relation3dbetweentracks(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:blindfind.AllRelations)
  return target;
}

int AllRelations::ByteSize() const {
  int total_size = 0;

  // repeated .blindfind.Relation2dBetweenTracks relation2dBetweenTracks = 1;
  total_size += 1 * this->relation2dbetweentracks_size();
  for (int i = 0; i < this->relation2dbetweentracks_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->relation2dbetweentracks(i));
  }

  // repeated .blindfind.Relation3dBetweenTracks relation3dBetweenTracks = 2;
  total_size += 1 * this->relation3dbetweentracks_size();
  for (int i = 0; i < this->relation3dbetweentracks_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->relation3dbetweentracks(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AllRelations::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AllRelations* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AllRelations*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AllRelations::MergeFrom(const AllRelations& from) {
  GOOGLE_CHECK_NE(&from, this);
  relation2dbetweentracks_.MergeFrom(from.relation2dbetweentracks_);
  relation3dbetweentracks_.MergeFrom(from.relation3dbetweentracks_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AllRelations::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AllRelations::CopyFrom(const AllRelations& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AllRelations::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->relation2dbetweentracks())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->relation3dbetweentracks())) return false;
  return true;
}

void AllRelations::Swap(AllRelations* other) {
  if (other != this) {
    relation2dbetweentracks_.Swap(&other->relation2dbetweentracks_);
    relation3dbetweentracks_.Swap(&other->relation3dbetweentracks_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AllRelations::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AllRelations_descriptor_;
  metadata.reflection = AllRelations_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TrackMap::kTrackFieldNumber;
const int TrackMap::kAllRelationsFieldNumber;
#endif  // !_MSC_VER

TrackMap::TrackMap()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:blindfind.TrackMap)
}

void TrackMap::InitAsDefaultInstance() {
  allrelations_ = const_cast< ::blindfind::AllRelations*>(&::blindfind::AllRelations::default_instance());
}

TrackMap::TrackMap(const TrackMap& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:blindfind.TrackMap)
}

void TrackMap::SharedCtor() {
  _cached_size_ = 0;
  allrelations_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TrackMap::~TrackMap() {
  // @@protoc_insertion_point(destructor:blindfind.TrackMap)
  SharedDtor();
}

void TrackMap::SharedDtor() {
  if (this != default_instance_) {
    delete allrelations_;
  }
}

void TrackMap::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TrackMap::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TrackMap_descriptor_;
}

const TrackMap& TrackMap::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_trackInfo_2eproto();
  return *default_instance_;
}

TrackMap* TrackMap::default_instance_ = NULL;

TrackMap* TrackMap::New() const {
  return new TrackMap;
}

void TrackMap::Clear() {
  if (has_allrelations()) {
    if (allrelations_ != NULL) allrelations_->::blindfind::AllRelations::Clear();
  }
  track_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TrackMap::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:blindfind.TrackMap)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .blindfind.Track track = 1;
      case 1: {
        if (tag == 10) {
         parse_track:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_track()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_track;
        if (input->ExpectTag(18)) goto parse_allRelations;
        break;
      }

      // required .blindfind.AllRelations allRelations = 2;
      case 2: {
        if (tag == 18) {
         parse_allRelations:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_allrelations()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:blindfind.TrackMap)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:blindfind.TrackMap)
  return false;
#undef DO_
}

void TrackMap::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:blindfind.TrackMap)
  // repeated .blindfind.Track track = 1;
  for (int i = 0; i < this->track_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->track(i), output);
  }

  // required .blindfind.AllRelations allRelations = 2;
  if (has_allrelations()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->allrelations(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:blindfind.TrackMap)
}

::google::protobuf::uint8* TrackMap::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:blindfind.TrackMap)
  // repeated .blindfind.Track track = 1;
  for (int i = 0; i < this->track_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->track(i), target);
  }

  // required .blindfind.AllRelations allRelations = 2;
  if (has_allrelations()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->allrelations(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:blindfind.TrackMap)
  return target;
}

int TrackMap::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // required .blindfind.AllRelations allRelations = 2;
    if (has_allrelations()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->allrelations());
    }

  }
  // repeated .blindfind.Track track = 1;
  total_size += 1 * this->track_size();
  for (int i = 0; i < this->track_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->track(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TrackMap::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TrackMap* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TrackMap*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TrackMap::MergeFrom(const TrackMap& from) {
  GOOGLE_CHECK_NE(&from, this);
  track_.MergeFrom(from.track_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_allrelations()) {
      mutable_allrelations()->::blindfind::AllRelations::MergeFrom(from.allrelations());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TrackMap::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TrackMap::CopyFrom(const TrackMap& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TrackMap::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->track())) return false;
  if (has_allrelations()) {
    if (!this->allrelations().IsInitialized()) return false;
  }
  return true;
}

void TrackMap::Swap(TrackMap* other) {
  if (other != this) {
    track_.Swap(&other->track_);
    std::swap(allrelations_, other->allrelations_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TrackMap::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TrackMap_descriptor_;
  metadata.reflection = TrackMap_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace blindfind

// @@protoc_insertion_point(global_scope)
